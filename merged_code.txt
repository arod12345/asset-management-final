=== Folder: /c/Users/hp/desktop/clerk-webhooks ===
--- File: .env ---
# Clerk
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_cHVtcGVkLW1hbGFtdXRlLTE3LmNsZXJrLmFjY291bnRzLmRldiQ
CLERK_SECRET_KEY=sk_test_Jv1tC72LP65SNhxpudwJLwQkMsyjoixe54zxn3mQnN
CLERK_WEBHOOK_SIGNING_SECRET=whsec_3Gw11eMeFSM+nnCVM3KETw+wIe+BI+YR

# Database
DATABASE_URL="mongodb+srv://sisayabel681:8911@cluster0.kzhxrwa.mongodb.net/expense-asset-tracker?retryWrites=true&w=majority&appName=Cluster0"

# Cloudinary
CLOUDINARY_CLOUD_NAME=djqrgifdi
CLOUDINARY_API_KEY=221658185954322
CLOUDINARY_API_SECRET=mno6zDlXbX04SV1YmkCV44BIbsg
CLOUDINARY_URL=cloudinary://221658185954322:mno6zDlXbX04SV1YmkCV44BIbsg@djqrgifdi
NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME=your_cloud_name # If using client-side uploads (less secure for some methods)

# Gemini API
GEMINI_API_KEY=AIzaSyAYDp8b9D9KGtyo9uGSNnH5uhLIJ9k6E_A

=== Folder: /c/Users/hp/desktop/clerk-webhooks ===
--- File: .eslintrc.json ---
{
  "extends": "next/core-web-vitals"
}


=== Folder: /c/Users/hp/desktop/clerk-webhooks/app/(tracker)/assets ===
--- File: page.tsx ---
"use client";
import React, { useState } from "react";
import AssetTable from "@/components/tracker/AssetTable";
import AssetPageHeader from "@/components/tracker/AssetPageHeader";
import { useOrganization, OrganizationSwitcher } from "@clerk/nextjs";


export default function AssetsPage() {
  const [activeTab, setActiveTab] = useState("All Assets");
  const { organization } = useOrganization();
  const [refreshKey, setRefreshKey] = useState(0);

  const handleAssetModified = () => { // Renamed for clarity as it's used for add/edit/delete
    setRefreshKey(prevKey => prevKey + 1); 
  };


  return (
    <div className="w-full">
      {/* <div className="mb-4 p-4 bg-gray-50 dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 flex items-center justify-between">
        <h2 className="text-md font-semibold text-gray-800 dark:text-gray-200">Current Organization: {organization?.name || "None"}</h2>
        <OrganizationSwitcher
            hidePersonal={true}
            // Setting a new org will trigger a re-render and AssetTable should re-fetch due to org change.
            // You could also add specific logic here if needed, e.g. afterSelectOrganizationUrl
            appearance={{
              elements: {
                organizationSwitcherTrigger: "text-sm text-gray-700 dark:text-gray-300 border border-gray-300 dark:border-gray-600 rounded-md px-3 py-1.5 hover:bg-gray-100 dark:hover:bg-gray-700",
                organizationSwitcherPopoverCard: "bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700",
                organizationSwitcherPopoverActionButton: "text-primary dark:text-primary-foreground",
                organizationPreviewTextContainer: "text-gray-700 dark:text-gray-300",
                organizationSwitcherPreviewButton: "text-gray-700 dark:text-gray-300"
              }
            }}
        />
      </div> */}

      <AssetPageHeader
        activeTab={activeTab}
        setActiveTab={setActiveTab}
        onAssetAdded={handleAssetModified} // Pass callback
      />
      <div className="mt-4">
        {activeTab === "All Assets" && <AssetTable refreshTrigger={refreshKey} />}
        {activeTab === "Not Active" && (
          <div className="h-[300px] bg-white dark:bg-gray-800 rounded-xl m-2 md:m-6 border border-dashed border-gray-300 dark:border-gray-700 flex items-center justify-center text-gray-400 dark:text-gray-500 text-sm">
            Not Active assets section (filter AssetTable or make separate component showing 'Inactive' status)
          </div>
        )}
      </div>
    </div>
  );
}

=== Folder: /c/Users/hp/desktop/clerk-webhooks/app/(tracker)/assets/[assetId] ===
--- File: page.tsx ---
"use client";
import React, { useEffect, useState, useCallback } from 'react';
import { useParams, useRouter } from 'next/navigation';
import { useAuth } from '@clerk/nextjs'; 
import Image from 'next/image'; 
import Link from 'next/link';
import {
  ArrowLeft,
  Edit2,
  Trash2,
  MapPin,
  UserCircle,
  Tag,
  Barcode,
  FileText,
  CalendarDays,
  AlertTriangle,
  Info,
  Building,
  ImageIcon // <-- Added ImageIcon here
} from 'lucide-react';
import EditAssetModal from '@/components/tracker/EditAssetModal';

interface Asset {
  id: string;
  title: string;
  model: string;
  serialNumber: string;
  imageUrl?: string | null;
  description: string;
  status: string;
  latitude?: number | null;
  longitude?: number | null;
  clerkOrganizationId: string;
  assignedToClerkUserId?: string | null;
  createdAt: string;
  updatedAt: string;
  assignedTo?: {
    firstName?: string | null;
    lastName?: string | null;
    email?: string | null;
    imageUrl?: string | null;
    clerkUserId: string;
  } | null;
}

interface DetailRowProps {
  label: string;
  value?: string | number | null | React.ReactNode;
  className?: string;
}

const DetailRow: React.FC<DetailRowProps> = ({ label, value, className = '' }) => {
  if (value === null || value === undefined || (typeof value === 'string' && value.trim() === '')) return null;

  return (
    <div className={`flex flex-col sm:flex-row sm:items-start py-3 ${className}`}>
      <p className="text-sm text-gray-500 dark:text-gray-400 w-full sm:w-1/3 lg:w-1/4 font-medium pr-4 mb-1 sm:mb-0">{label}</p>
      <div className="text-sm text-gray-800 dark:text-gray-200 w-full sm:w-2/3 lg:w-3/4">
        {typeof value === 'string' || typeof value === 'number' ? <p>{value}</p> : value}
      </div>
    </div>
  );
};

interface InfoCardProps {
  title: string;
  icon: React.ElementType;
  children: React.ReactNode;
}

const InfoCard: React.FC<InfoCardProps> = ({ title, icon: Icon, children }) => (
  <div className="bg-white dark:bg-slate-800 border-md rounded-lg p-4 mb-6">
    <div className="flex items-center text-gray-700 dark:text-gray-300 mb-3">
      <Icon size={18} className="mr-2 text-primary dark:text-sky-400" />
      <h3 className="text-md font-semibold">{title}</h3>
    </div>
    <div className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
      {children}
    </div>
  </div>
);

export default function AssetDetailsPage() {
  const params = useParams();
  const router = useRouter();
  const assetId = params.assetId as string;
  
  const { orgId, orgRole, userId: currentUserId } = useAuth();

  const [asset, setAsset] = useState<Asset | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);

  const fetchAssetDetails = useCallback(async () => {
    if (!assetId) {
      setError("Asset ID is missing.");
      setIsLoading(false);
      return;
    }
    if (!orgId) { 
      setIsLoading(true); 
      return;
    }
    setIsLoading(true);
    setError(null);
    try {
      const response = await fetch(`/api/assets/${assetId}`, {credentials: 'include'});
      if (!response.ok) {
        if (response.status === 404) throw new Error('Asset not found or you do not have permission to view it.');
        const errorData = await response.json().catch(() => ({message: `Error fetching asset details (${response.status})`}));
        throw new Error(errorData.message);
      }
      const data: Asset = await response.json();
      setAsset(data);
    } catch (err: any) {
      setError(err.message);
      setAsset(null);
    } finally {
      setIsLoading(false);
    }
  }, [assetId, orgId]);

  useEffect(() => {
    if (assetId && orgId) {
        fetchAssetDetails();
    }
  }, [assetId, orgId, fetchAssetDetails]);

  const handleDeleteAsset = async () => {
    if (!asset) return;
    if (!confirm("Are you sure you want to delete this asset? This action cannot be undone.")) return;
    
    setIsLoading(true);
    try {
      const response = await fetch(`/api/assets/${asset.id}`, { method: 'DELETE', credentials: 'include' });
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({ message: `Failed to delete asset (${response.status} ${response.statusText})` }));
        throw new Error(errorData.message);
      }
      alert("Asset deleted successfully.");
      router.push('/assets');
    } catch (err: any) {
      console.error("Delete error:", err);
      setError(`Error deleting asset: ${err.message}`);
    } finally {
      setIsLoading(false);
    }
  };

  const canManageAsset = orgRole === 'org:admin';

  if (isLoading && !error) return (
    <div className="flex flex-col justify-center items-center min-h-[calc(100vh-150px)] p-4 bg-gray-50 dark:bg-slate-900">
      <div className="animate-spin rounded-full h-12 w-12 border-t-4 border-b-4 border-primary dark:border-sky-400"></div>
      <p className="mt-5 text-md font-semibold text-gray-600 dark:text-gray-300">Loading Asset Details...</p>
    </div>
  );

  if (error) return (
    <div className="flex flex-col justify-center items-center min-h-[calc(100vh-150px)] p-4 text-center bg-gray-50 dark:bg-slate-900">
      <AlertTriangle className="mx-auto h-12 w-12 text-red-500 dark:text-red-400" />
      <h2 className="mt-3 text-xl font-bold text-red-600 dark:text-red-500">An Error Occurred</h2>
      <p className="mt-1.5 text-sm text-gray-600 dark:text-gray-400 max-w-md">{error}</p>
      <Link href="/assets" className="mt-6 inline-flex items-center px-5 py-2.5 text-xs font-semibold text-white bg-primary dark:bg-sky-600 rounded-md border-sm hover:bg-primary/90 dark:hover:bg-sky-500 transition-colors">
        <ArrowLeft size={16} className="mr-1.5" /> Back to Assets
      </Link>
    </div>
  );
  
  if (!asset) return (
     <div className="flex flex-col justify-center items-center min-h-[calc(100vh-150px)] p-4 text-center bg-gray-50 dark:bg-slate-900">
      <Info className="mx-auto h-12 w-12 text-gray-400 dark:text-gray-500" />
      <h2 className="mt-3 text-xl font-bold text-gray-700 dark:text-gray-200">Asset Not Found</h2>
      <p className="mt-1.5 text-sm text-gray-600 dark:text-gray-400">This asset may not exist or you might not have permission to view it.</p>
      <Link href="/assets" className="mt-6 inline-flex items-center px-5 py-2.5 text-xs font-semibold text-white bg-primary dark:bg-sky-600 rounded-md border-sm hover:bg-primary/90 dark:hover:bg-sky-500 transition-colors">
        <ArrowLeft size={16} className="mr-1.5" /> Back to Assets
      </Link>
    </div>
  );

  const statusTextClass = asset.status.toLowerCase() === 'active' ? 'text-green-600 dark:text-green-400' :
                        asset.status.toLowerCase() === 'in repair' ? 'text-yellow-600 dark:text-yellow-400' :
                        asset.status.toLowerCase() === 'decommissioned' ? 'text-red-600 dark:text-red-500' :
                        'text-gray-700 dark:text-gray-300';

  return (
    <div className="min-h-screen dark:bg-slate-900 ">
      {/* Header Bar */} 
      <div className="max-w-7xl mx-auto mb-6">
        <div className="flex flex-col sm:flex-row justify-between items-center gap-3 pb-4 border-b border-gray-200 dark:border-slate-700">
          <div>
            <button
              onClick={() => router.back()}
              className="flex items-center text-xs font-medium text-primary dark:text-sky-400 hover:text-primary/80 dark:hover:text-sky-300 transition-colors mb-2 sm:mb-0"
            >
              <ArrowLeft size={16} className="mr-1.5" /> Back to Assets
            </button>
            <h1 className="text-2xl font-bold text-gray-900 dark:text-white">{asset.title}</h1>
          </div>
          {canManageAsset && (
            <div className="flex items-center space-x-2 self-start sm:self-center">
              <button
                onClick={() => setIsEditModalOpen(true)}
                className="flex items-center px-3.5 py-2 text-xs font-medium text-white bg-[#34bc68] dark:bg-blue-500 rounded-md border-sm hover:bg-[#299a5d] dark:hover:bg-blue-600 transition-colors"
              >
                <Edit2 size={14} className="mr-1.5 " /> Edit
              </button>
              <button
                onClick={handleDeleteAsset}
                className="flex items-center px-3.5 py-2 text-xs text-red-600 font-medium bg-transparent border border-gray-300 dark:bg-red-500 rounded-md border-sm hover:bg-red-700 hover:text-white dark:hover:bg-red-600 transition-colors"
              >
                <Trash2 size={14} className="mr-1.5" /> Delete
              </button>
            </div>
          )}
        </div>
      </div>

      {/* Main Layout: Content + Sidebar */} 
      <div className="max-w-7xl mx-auto grid grid-cols-1 lg:grid-cols-12 gap-6">
        {/* Main Content Area (Details List) */} 
        <div className="lg:col-span-8 xl:col-span-9 bg-white dark:bg-slate-800 border-md rounded-lg p-5 md:p-6">
          <div className="space-y-2 divide-y divide-gray-100 dark:divide-slate-700/50">
            
            {/* Section: General Information */} 
            <div className="pt-2">
              <h2 className="text-sm font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wider mb-3">Asset Information</h2>
              {/* <DetailRow label="Description" value={asset.description} /> */}
              <DetailRow label="Model" value={asset.model} />
              <DetailRow label="Serial Number" value={asset.serialNumber} />
              <DetailRow label="Status" value={<span className={`font-semibold ${statusTextClass}`}>{asset.status}</span>} />
              <DetailRow label="Organization ID" value={asset.clerkOrganizationId} />
            </div>

            {/* Section: Timestamps */} 
            <div className="pt-4">
              <h2 className="text-sm font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wider mb-3 mt-2">Record Timestamps</h2>
              <DetailRow label="Created On" value={new Date(asset.createdAt).toLocaleString()} />
              <DetailRow label="Last Updated" value={new Date(asset.updatedAt).toLocaleString()} />
            </div>

            {/* Section: Description (if long, could be its own section) */} 
            {asset.description && asset.description.length > 150 && (
                <div className="pt-4">
                    <h2 className="text-sm font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wider mb-3 mt-2">Detailed Description</h2>
                    <p className="text-sm text-gray-700 dark:text-gray-300 whitespace-pre-wrap leading-relaxed">
                        {asset.description}
                    </p>
                </div>
            )}
          </div>
        </div>

        {/* Right Sidebar */} 
        <div className="lg:col-span-4 xl:col-span-3 space-y-6">
          {/* Asset Image Card */} 
          <InfoCard title="Asset Image" icon={ImageIcon}>
            {asset.imageUrl ? (
              <a href={asset.imageUrl} target="_blank" rel="noopener noreferrer" className="block group">
                <Image
                  src={asset.imageUrl}
                  alt={asset.title}
                  width={300} // Adjust width as needed for sidebar
                  height={300} // Adjust height as needed for sidebar
                  className="rounded-md object-cover w-full aspect-square border-sm group-hover:border-md transition-border duration-300"
                  priority={false} // Usually not priority for sidebar images
                />
              </a>
            ) : (
              <div className="w-full aspect-square bg-gray-100 dark:bg-slate-700 rounded-md flex flex-col items-center justify-center text-gray-400 dark:text-slate-500">
                <ImageIcon size={48} />
                <span className="mt-2 text-xs">No Image Available</span>
              </div>
            )}
          </InfoCard>

          {asset.assignedTo && (
            <InfoCard title="Assigned To" icon={UserCircle}>
              <p className="font-semibold">{asset.assignedTo.firstName || asset.assignedTo.email?.split('@')[0]} {asset.assignedTo.lastName || ''}</p>
              {asset.assignedTo.email && <p className="text-xs">{asset.assignedTo.email}</p>}
            </InfoCard>
          )}
          {!asset.assignedTo && (
            <InfoCard title="Assigned To" icon={UserCircle}>
              <p className="italic">Unassigned</p>
            </InfoCard>
          )}

          {(asset.latitude && asset.longitude) && (
            <InfoCard title="Location" icon={MapPin}>
              <p>{asset.latitude}, {asset.longitude}</p>
              <a 
                href={`https://www.google.com/maps?q=${asset.latitude},${asset.longitude}`} 
                target="_blank" 
                rel="noopener noreferrer"
                className="text-blue-600 dark:text-blue-400 hover:underline text-xs mt-1 inline-block"
              >
                View on Google Maps
              </a>
            </InfoCard>
          )}
        </div>
      </div>

      {isEditModalOpen && asset && (
        <EditAssetModal
          asset={asset}
          onClose={() => setIsEditModalOpen(false)}
          onAssetUpdated={() => {
            setIsEditModalOpen(false);
            fetchAssetDetails();
          }}
        />
      )}
    </div>
  );
}

=== Folder: /c/Users/hp/desktop/clerk-webhooks/app/(tracker)/dashboard ===
--- File: page.tsx ---
"use client";
import React from "react";
import DashboardComp from "@/components/tracker/DashboardComp";
import DashboardAssetAnalysis from "@/components/tracker/DashboardAssetAnalysis";

export default function DashboardPage() {
  return (
    <div className="space-y-6">
      <DashboardComp />
      <DashboardAssetAnalysis />
    </div>
  );
}

=== Folder: /c/Users/hp/desktop/clerk-webhooks/app/(tracker)/employees ===
--- File: page.tsx ---
"use client";
import React, { useState } from "react";
import EmployeeTable from "@/components/tracker/EmployeeTable";
import EmployeePageHeader from "@/components/tracker/EmployeePageHeader"; // Corrected typo

export default function EmployeesPage() {
  const [activeTab, setActiveTab] = useState("All Employees");

  return (
    <div className="w-full">
      <EmployeePageHeader 
        activeTab={activeTab}
        setActiveTab={setActiveTab}
      />
      <div className="mt-4">
        {activeTab === "All Employees" && <EmployeeTable />}
        {activeTab === "Teams" && (
          <div className="h-[300px] bg-white rounded-xl m-2 md:m-6 border border-dashed border-gray-300 flex items-center justify-center text-gray-400 text-sm">
            Teams section placeholder
          </div>
        )}
        {activeTab === "Roles" && (
          <div className="h-[300px] bg-white rounded-xl m-2 md:m-6 border border-dashed border-gray-300 flex items-center justify-center text-gray-400 text-sm">
            Roles section placeholder (Content from RoleBox could go here or separate page)
          </div>
        )}
      </div>
    </div>
  );
}

=== Folder: /c/Users/hp/desktop/clerk-webhooks/app/(tracker) ===
--- File: layout.tsx ---
"use client"; // This layout itself uses client-side hooks for sidebar state

import React, { useState } from "react";
import { usePathname } from 'next/navigation';
import Sidebar from "@/components/tracker/Sidebar"; // Adjusted path
import Topbar from "@/components/tracker/Topbar";   // Adjusted path

export default function TrackerLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const [isMobileSidebarOpen, setIsMobileSidebarOpen] = useState(false);
  const pathname = usePathname();

  // Determine active sidebar item based on pathname
  let activeItem = "Dashboard"; // Default
  if (pathname.includes("/employees")) activeItem = "Employees";
  else if (pathname.includes("/assets")) activeItem = "Assets";
  else if (pathname.includes("/roles")) activeItem = "Roles";
  else if (pathname.includes("/expense")) activeItem = "Expense";
  else if (pathname.includes("/income")) activeItem = "Income";
  else if (pathname.includes("/reports")) activeItem = "Reports";
  else if (pathname.includes("/settings")) activeItem = "Settings";
  // Add more conditions if needed for other sidebar items

  return (
    <div className="flex h-screen bg-white relative">
      {/* Sidebar for desktop */}
      <div className="hidden md:block md:w-[18%] lg:w-[15%] h-full">
        <Sidebar
          active={activeItem}
          onItemClick={() => {}} // Navigation handled by Link components in Sidebar
          isMobileSidebarOpen={isMobileSidebarOpen}
          setIsMobileSidebarOpen={setIsMobileSidebarOpen}
        />
      </div>

      {/* Sidebar for mobile */}
      {isMobileSidebarOpen && (
        <div className="fixed inset-0 z-40 md:hidden"> {/* z-40 so it's below modals (z-50) */}
          <div className="flex h-full">
            <div className="w-64 bg-white h-full shadow-md">
              <Sidebar
                active={activeItem}
                onItemClick={() => setIsMobileSidebarOpen(false)} // Close on item click for mobile
                isMobileSidebarOpen={isMobileSidebarOpen}
                setIsMobileSidebarOpen={setIsMobileSidebarOpen}
              />
            </div>
            <div
              className="flex-1 bg-black/40"
              onClick={() => setIsMobileSidebarOpen(false)}
            />
          </div>
        </div>
      )}


      {/* Small gap and divider (only for desktop) */}
      <div className="hidden md:block md:w-[1%]"></div>
      <div className="hidden md:block w-[1px] h-full bg-[#e7e4e4]"></div>

      {/* Main Content */}
      <div className="flex-1 flex flex-col w-full h-full bg-white overflow-y-auto">
        <Topbar setIsMobileSidebarOpen={setIsMobileSidebarOpen} />
        <main className="flex-1 p-4 md:p-6">{children}</main>
      </div>
    </div>
  );
}

=== Folder: /c/Users/hp/desktop/clerk-webhooks/app/(tracker)/notifications ===
--- File: page.tsx ---
// app/(tracker)/notifications/page.tsx
'use client';

import React from 'react';
import { useNotifications, Notification } from '@/lib/hooks/useNotifications';
import NotificationItem from '@/components/notifications/NotificationItem';
import { Button } from '@/components/ui/button'; 
import { Loader2, AlertTriangle, Bell as BellIcon } from 'lucide-react'; // Using lucide-react Bell

export default function NotificationsPage() {
  const { notifications, isLoading, isError, markAsRead, mutate } = useNotifications();

  const handleMarkAllAsRead = async () => {
    if (notifications && notifications.length > 0) {
      const unreadNotificationIds = notifications
        .filter(n => !n.read)
        .map(n => n.id);
      
      if (unreadNotificationIds.length > 0) {
        try {
          await markAsRead(unreadNotificationIds, true);
        } catch (error) {
          console.error("Failed to mark all as read:", error);
        }
      }
    }
  };

  if (isLoading) {
    return (
      <div className="flex flex-col justify-center items-center min-h-[calc(100vh-200px)] p-4">
        <Loader2 className="h-10 w-10 animate-spin text-primary mb-4" />
        <p className="text-lg text-gray-600 dark:text-gray-400">Loading notifications...</p>
      </div>
    );
  }

  if (isError) {
    return (
      <div className="flex flex-col items-center justify-center min-h-[calc(100vh-200px)] p-4 text-red-600 dark:text-red-400">
        <AlertTriangle className="h-12 w-12 mb-4" />
        <h2 className="text-xl font-semibold mb-2">Error Loading Notifications</h2>
        <p className="text-center mb-4 max-w-md">We couldn't fetch your notifications. Please check your connection and try again.</p>
        <Button onClick={() => mutate()} variant="outline">
          <Loader2 className="mr-2 h-4 w-4 animate-spin" /> 
          Try Again
        </Button>
      </div>
    );
  }

  const unreadCount = notifications?.filter(n => !n.read).length || 0;

  return (
    <div className="container mx-auto p-4 md:p-6 lg:p-8 max-w-3xl">
      <div className="flex flex-col sm:flex-row justify-between items-center mb-6 pb-4 border-b dark:border-gray-700">
        <h1 className="text-2xl md:text-3xl font-bold text-gray-800 dark:text-gray-100 mb-4 sm:mb-0">Notifications</h1>
        {notifications && notifications.length > 0 && unreadCount > 0 && (
          <Button onClick={handleMarkAllAsRead} disabled={isLoading || unreadCount === 0}>
            Mark all as read ({unreadCount})
          </Button>
        )}
      </div>

      {notifications && notifications.length > 0 ? (
        <div className="space-y-3 sm:space-y-4">
          {notifications.map((notification) => (
            <NotificationItem key={notification.id} notification={notification} />
          ))}
        </div>
      ) : (
        <div className="text-center py-12 min-h-[calc(100vh-300px)] flex flex-col justify-center items-center">
          <BellIcon className="h-16 w-16 text-gray-400 dark:text-gray-500 mx-auto mb-6" />
          <h2 className="text-xl font-semibold text-gray-700 dark:text-gray-300">No Notifications Yet</h2>
          <p className="text-gray-500 dark:text-gray-400 mt-2">You're all caught up! We'll let you know when something new happens.</p>
        </div>
      )}
    </div>
  );
}


=== Folder: /c/Users/hp/desktop/clerk-webhooks/app/(tracker)/reports ===
--- File: page.tsx ---
"use client";
import React, { useState } from 'react';
import { useOrganization } from '@clerk/nextjs';
import { Download, FileText, FileSpreadsheet, FileType } from 'lucide-react';

type ReportFormat = "pdf" | "word" | "excel";
type ReportType = "all_assets" | "asset_assignments" | "asset_status_summary"; // Add more types

interface ReportParams {
  format: ReportFormat;
  type: ReportType;
  orgId: string; // Added orgId
  // Add other params like date ranges, status filters etc.
  dateFrom?: string;
  dateTo?: string;
  statusFilter?: string;
}

export default function ReportsPage() {
  const { organization } = useOrganization();
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [successMessage, setSuccessMessage] = useState<string | null>(null);

  const [reportType, setReportType] = useState<ReportType>("all_assets");
  const [reportFormat, setReportFormat] = useState<ReportFormat>("pdf");
  const [dateFrom, setDateFrom] = useState<string>('');
  const [dateTo, setDateTo] = useState<string>('');

  const handleGenerateReport = async () => {
    if (!organization) {
      setError("No organization selected. Please select an organization first.");
      return;
    }
    setIsLoading(true);
    setError(null);
    setSuccessMessage(null);

    console.log('[ReportsPage] Organization context before API call:', organization); // DEBUG LOG
    if (organization) {
      console.log('[ReportsPage] organization.id:', organization.id); // DEBUG LOG
    }

    const reportParams: ReportParams = {
      format: reportFormat,
      type: reportType,
      orgId: organization.id, // Explicitly send organization.id
      dateFrom: dateFrom || undefined, // Send undefined if empty
      dateTo: dateTo || undefined,   // Send undefined if empty
      // ...other params
    };

    console.log('[ReportsPage] Sending reportParams:', reportParams); // Added log

    try {
      const response = await fetch('/api/reports/generate', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json', 'Accept': 'application/octet-stream' },
        body: JSON.stringify(reportParams),
        credentials: 'include',
      });

      if (!response.ok) {
        const errData = await response.json().catch(() => ({ message: `Failed to generate report. Server responded with ${response.status}` }));
        throw new Error(errData.message || `Report generation failed with status: ${response.status}`);
      }

      // Handle file download
      const blob = await response.blob();
      const filename = response.headers.get('Content-Disposition')?.split('filename=')[1]?.replace(/"/g, '') || `report.${reportFormat}`;
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = filename;
      document.body.appendChild(a);
      a.click();
      a.remove();
      window.URL.revokeObjectURL(url);

      setSuccessMessage(`Report "${filename}" generated and download started.`);

    } catch (err: any) {
      console.error("Report generation error:", err);
      setError(err.message || "An unexpected error occurred during report generation.");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="w-full p-4 md:p-6 space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-semibold text-gray-900 dark:text-white">Generate Reports</h1>
      </div>

      {error && <div className="p-4 mb-4 text-sm text-red-700 bg-red-100 rounded-lg dark:bg-red-200 dark:text-red-800" role="alert">{error}</div>}
      {successMessage && <div className="p-4 mb-4 text-sm text-green-700 bg-green-100 rounded-lg dark:bg-green-200 dark:text-green-800" role="alert">{successMessage}</div>}
      
      <div className="bg-white dark:bg-gray-800 border  rounded-2xl p-6 space-y-6">
        <div>
          <label htmlFor="reportType" className="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Report Type</label>
          <select
            id="reportType"
            value={reportType}
            onChange={(e) => setReportType(e.target.value as ReportType)}
            className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
          >
            <option value="all_assets">All Assets List</option>
            <option value="asset_assignments">Asset Assignments</option>
            <option value="asset_status_summary">Asset Status Summary</option>
            {/* Add more report types here */}
          </select>
        </div>

        <div>
          <label htmlFor="reportFormat" className="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Report Format</label>
          <div className="flex space-x-2">
            {(["pdf", "word", "excel"] as ReportFormat[]).map(fmt => (
                 <button
                    key={fmt}
                    onClick={() => setReportFormat(fmt)}
                    className={`flex items-center justify-center px-4 py-2 border rounded-lg text-sm font-medium
                                ${reportFormat === fmt 
                                    ? 'bg-primary text-white border-primary dark:bg-primary dark:border-primary' 
                                    : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-100 dark:bg-gray-700 dark:text-gray-300 dark:border-gray-600 dark:hover:bg-gray-600'}`}
                 >
                    {fmt === 'pdf' && <FileType size={16} className="mr-2"/>}
                    {fmt === 'word' && <FileText size={16} className="mr-2"/>}
                    {fmt === 'excel' && <FileSpreadsheet size={16} className="mr-2"/>}
                    {fmt.toUpperCase()}
                 </button>
            ))}
          </div>
        </div>

        {/* Date Range Pickers */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label htmlFor="dateFrom" className="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Date From</label>
            <input 
              type="date" 
              id="dateFrom" 
              name="dateFrom" 
              value={dateFrom}
              onChange={(e) => setDateFrom(e.target.value)}
              className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
            />
          </div>
          <div>
            <label htmlFor="dateTo" className="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Date To</label>
            <input 
              type="date" 
              id="dateTo" 
              name="dateTo" 
              value={dateTo}
              onChange={(e) => setDateTo(e.target.value)}
              className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
            />
          </div>
        </div>

        <button
          onClick={handleGenerateReport}
          disabled={isLoading || !organization}
          className="w-full sm:w-auto flex items-center justify-center px-6 py-2.5 text-sm font-medium text-white bg-green-600 rounded-lg hover:bg-green-700 focus:ring-4 focus:outline-none focus:ring-green-300 disabled:bg-gray-400 dark:bg-green-500 dark:hover:bg-green-600 dark:focus:ring-green-800 dark:disabled:bg-gray-500"
        >
          <Download size={18} className="mr-2" />
          {isLoading ? 'Generating Report...' : `Generate ${reportFormat.toUpperCase()} Report`}
        </button>
        {!organization && <p className="text-xs text-yellow-600 mt-2">Please ensure an organization is active to generate reports.</p>}
      </div>

       <div className="bg-white dark:bg-gray-800 border rounded-2xl p-6 mt-6">
            <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-3">About Report Generation</h3>
            <p className="text-sm text-gray-600 dark:text-gray-400">
                This section uses an API to generate reports in your chosen format.
                The actual document creation (PDF, Word, Excel) from data would typically involve:
            </p>
            <ul className="list-disc list-inside text-sm text-gray-600 dark:text-gray-400 mt-2 space-y-1">
                <li>Fetching the relevant data from the database based on your selected report type and filters.</li>
                <li>
                    Formatting this data appropriately. For complex formats like PDF and Word, this often involves using libraries 
                    (e.g., <code className="text-xs bg-gray-200 dark:bg-gray-700 p-1 rounded">pdf-lib</code>, <code className="text-xs bg-gray-200 dark:bg-gray-700 p-1 rounded">docx</code>) or a templating engine.
                    For Excel, libraries like <code className="text-xs bg-gray-200 dark:bg-gray-700 p-1 rounded">exceljs</code> are common.
                </li>
                <li>
                    If using an AI service like Gemini, you would send the structured data to the Gemini API with a prompt
                    instructing it to generate the content in the desired format (e.g., "Generate a PDF report summarizing these assets...").
                    The AI might return structured text, markdown, or in some cases, directly a file or base64 encoded file content if the API supports it.
                    This usually requires careful prompt engineering.
                </li>
                <li>The backend API then sends the generated file back to your browser for download.</li>
            </ul>
            <p className="text-sm text-gray-600 dark:text-gray-400 mt-3">
                The current implementation sets up the client-side request and placeholder for backend processing.
                You would need to build out the <code className="text-xs bg-gray-200 dark:bg-gray-700 p-1 rounded">/api/reports/generate</code> endpoint
                with your chosen data fetching and document generation logic.
            </p>
        </div>

    </div>
  );
}

=== Folder: /c/Users/hp/desktop/clerk-webhooks/app/(tracker)/roles ===
--- File: page.tsx ---
"use client";
import React, { useState } from "react";
// import RoleBox from "@/components/tracker/RoleBox";
// import RolePageHeader from "@/components/tracker/RolePageHeader";

export default function RolesPage() {
  const [activeTab, setActiveTab] = useState("All Roles");

  return (
    <div className="w-full">
      {/* <RolePageHeader activeTab={activeTab} setActiveTab={setActiveTab} /> */}
      <div className="mt-4">
        {/* {activeTab === "All Roles" && <RoleBox />} */}
        {activeTab === "Permissions" && (
          <div className="h-[300px] bg-white rounded-xl m-2 md:m-6 border border-dashed border-gray-300 flex items-center justify-center text-gray-400 text-sm">
            Permissions section placeholder
          </div>
        )}
      </div>
    </div>
  );
}

=== Folder: /c/Users/hp/desktop/clerk-webhooks/app/(tracker)/settings ===
--- File: page.tsx ---
"use client";

import { ThemeToggle } from "@/components/settings/ThemeToggle";
import { PageHeader } from "@/components/PageHeader"; // Assuming you have a PageHeader component

export default function SettingsPage() {
  return (
    <div className="container mx-auto py-8 px-4 md:px-6">
      <PageHeader title="Settings" description="Manage your application and account settings." />
      
      <div className="mt-8 grid gap-8 md:grid-cols-1 lg:grid-cols-3">
        {/* Column 1: General Settings (like Theme) */}
        <div className="lg:col-span-2 space-y-6">
          <div className="bg-white dark:bg-slate-800 shadow-md rounded-lg p-6">
            <h2 className="text-xl font-semibold text-gray-800 dark:text-gray-100 mb-4">Appearance</h2>
            <div className="space-y-4">
              <div>
                <h3 className="text-md font-medium text-gray-700 dark:text-gray-300 mb-2">Theme</h3>
                <p className="text-sm text-gray-500 dark:text-gray-400 mb-3">
                  Select how Asset Scout looks to you. Select a single theme, or sync with your system.
                </p>
                <ThemeToggle />
              </div>
              {/* Other appearance settings can go here */}
            </div>
          </div>

          {/* Placeholder for Profile Settings */}
          <div className="bg-white dark:bg-slate-800 shadow-md rounded-lg p-6">
            <h2 className="text-xl font-semibold text-gray-800 dark:text-gray-100 mb-4">Profile</h2>
            <p className="text-gray-600 dark:text-gray-400">Manage your personal information. (Coming Soon)</p>
            {/* Profile form elements will go here */}
          </div>

          {/* Placeholder for Notification Settings */}
          <div className="bg-white dark:bg-slate-800 shadow-md rounded-lg p-6">
            <h2 className="text-xl font-semibold text-gray-800 dark:text-gray-100 mb-4">Notifications</h2>
            <p className="text-gray-600 dark:text-gray-400">Configure your notification preferences. (Coming Soon)</p>
            {/* Notification toggles will go here */}
          </div>

        </div>

        {/* Column 2: Sidebar / Help (Optional) */}
        <div className="lg:col-span-1 space-y-6">
          <div className="bg-white dark:bg-slate-800 shadow-md rounded-lg p-6">
            <h3 className="text-lg font-semibold text-gray-800 dark:text-gray-100 mb-3">Need Help?</h3>
            <p className="text-sm text-gray-600 dark:text-gray-400 mb-3">
              Visit our help center or contact support if you have any questions.
            </p>
            {/* Links to help/support */}
          </div>
        </div>
      </div>
    </div>
  );
}


=== Folder: /c/Users/hp/desktop/clerk-webhooks/app/api/assets ===
--- File: route.ts ---
import { NextResponse } from 'next/server';
import { auth, clerkClient } from '@clerk/nextjs/server';
import prisma from '@/lib/prisma';
import { PrismaClientKnownRequestError } from '@prisma/client/runtime/library';
import { getUserById, createUser } from '@/lib/users';
import { uploadToCloudinary } from '@/lib/cloudinary'; // Import Cloudinary helper

export const dynamic = 'force-dynamic';
export const revalidate = 0;
export const runtime = 'nodejs'; // Ensure Node.js runtime for file operations if any

export async function POST(req: Request) {
  try {
    const { userId, orgId, orgRole } = await auth();
    const body = await req.json();
    const {
      title,
      model,
      serialNumber,
      imageBase64, // Expecting base64 string for new image
      description,
      status,
      latitude,
      longitude,
      assignedToClerkUserId,
    } = body;

    if (!userId) {
      return new NextResponse('Unauthorized', { status: 401 });
    }
    if (!orgId) {
      return new NextResponse('No active organization selected', { status: 400 });
    }
    if (orgRole !== 'org:admin') {
      return new NextResponse('Forbidden: Insufficient role', { status: 403 });
    }
    if (!title || !model || !serialNumber || !description) {
      return new NextResponse('Missing required asset fields', { status: 400 });
    }

    let imageUrl: string | undefined = undefined;
    if (imageBase64) {
      try {
        const uploadResult = await uploadToCloudinary(imageBase64, 'assets');
        imageUrl = uploadResult.secure_url;
      } catch (uploadError) {
        console.error('Cloudinary upload failed:', uploadError);
        return new NextResponse('Image upload failed', { status: 500 });
      }
    }

    let assignedToDbUserId: string | undefined = undefined;
    if (assignedToClerkUserId) {
      const { user: assignee } = await getUserById({ clerkUserId: assignedToClerkUserId });
      if (!assignee) {
        try {
          const clerkUser = await clerkClient.users.getUser(assignedToClerkUserId);
          if (clerkUser) {
            const newUser = {
              clerkUserId: assignedToClerkUserId,
              email: clerkUser.emailAddresses[0]?.emailAddress || "",
              firstName: clerkUser.firstName || "",
              lastName: clerkUser.lastName || "",
              imageUrl: clerkUser.imageUrl || ""
            };
            const { user: createdUser } = await createUser(newUser as any);
            if (createdUser) assignedToDbUserId = createdUser.id;
            else throw new Error("Failed to create assignee in local DB");
          } else {
             return new NextResponse(`Assignee user with Clerk ID ${assignedToClerkUserId} not found in Clerk.`, { status: 404 });
          }
        } catch (error) {
          console.error("Error fetching/creating assignee:", error);
          const errorMessage = error instanceof Error ? error.message : "Unknown error creating assignee";
          return new NextResponse(errorMessage, { status: 500 });
        }
      } else {
        assignedToDbUserId = assignee.id;
      }
    }

    const asset = await prisma.asset.create({
      data: {
        title,
        model,
        serialNumber,
        imageUrl, // Store Cloudinary URL
        description,
        status: status || 'Active',
        latitude: latitude ? parseFloat(latitude) : undefined,
        longitude: longitude ? parseFloat(longitude) : undefined,
        clerkOrganizationId: orgId,
        assignedToClerkUserId: assignedToClerkUserId || null,
        assignedToDbUserId: assignedToDbUserId || null,
      },
    });

    // Create notification if asset is assigned
    if (asset.assignedToClerkUserId && asset.id && asset.title) {
      try {
        await prisma.notification.create({
          data: {
            message: `Asset "${asset.title}" has been assigned to you.`,
            recipientClerkUserId: asset.assignedToClerkUserId,
            recipientDbUserId: asset.assignedToDbUserId!, // Add non-null assertion if confident, or handle potential null
            assetId: asset.id,
            type: 'asset_assignment',
          },
        });
        console.log(`[ASSETS_POST] Notification created for user ${asset.assignedToClerkUserId} regarding asset ${asset.id}`);
      } catch (notificationError) {
        // Log the error but don't let it fail the main asset creation response
        console.error(`[ASSETS_POST] Failed to create notification for asset ${asset.id}:`, notificationError);
      }
    }

    return NextResponse.json(asset, { status: 201, headers: { 'Cache-Control': 'no-store' } });
  } catch (error: unknown) {
    console.error('[ASSETS_POST]', error);
    if (error instanceof PrismaClientKnownRequestError) {
      if (error.code === 'P2002' && error.meta?.target === 'Asset_serialNumber_key') {
        return new NextResponse('Serial number already exists.', { status: 409 });
      }
    }
    const errorMessage = error instanceof Error ? error.message : 'Internal Server Error';
    return new NextResponse(errorMessage, { status: 500 });
  }
}

export async function GET(req: Request) {
  try {
    const { userId, orgId, orgRole } = await auth();

    if (!userId) return new NextResponse('Unauthorized', { status: 401 });
    if (!orgId) return new NextResponse('No active organization selected', { status: 400 });

    let assets;
    if (orgRole === 'org:admin') {
      assets = await prisma.asset.findMany({
        where: { clerkOrganizationId: orgId },
        include: { assignedTo: { select: { firstName: true, lastName: true, email: true, imageUrl: true, clerkUserId: true }} },
        orderBy: { createdAt: 'desc' },
      });
    } else {
      assets = await prisma.asset.findMany({
        where: { clerkOrganizationId: orgId, assignedToClerkUserId: userId },
        include: { assignedTo: { select: { firstName: true, lastName: true, email: true, imageUrl: true, clerkUserId: true }} },
        orderBy: { createdAt: 'desc' },
      });
    }
    return NextResponse.json(assets, { headers: { 'Cache-Control': 'no-store' } });
  } catch (error: unknown) {
    console.error('[ASSETS_GET]', error);
    const errorMessage = error instanceof Error ? error.message : 'Internal Server Error';
    return new NextResponse(errorMessage, { status: 500 });
  }
}

=== Folder: /c/Users/hp/desktop/clerk-webhooks/app/api/assets/[assetId] ===
--- File: route.ts ---
import { NextResponse } from 'next/server';
import { auth, clerkClient } from '@clerk/nextjs/server';
import prisma from '@/lib/prisma';
import { Prisma } from '@prisma/client'; // For Prisma.PrismaClientKnownRequestError
import { getUserById } from '@/lib/users';
import { uploadToCloudinary, deleteFromCloudinary, getPublicIdFromUrl } from '@/lib/cloudinary';

interface Params {
  params: { assetId: string };
}

export async function GET(req: Request, { params }: Params) {
  try {
    const { userId, orgId, orgRole } = await auth(); // Correct destructuring and await auth()
    const { assetId } = params;

    if (!userId) return new NextResponse('Unauthorized', { status: 401 });
    if (!orgId) return new NextResponse('No active organization selected', { status: 400 });
    if (!assetId) return new NextResponse('Asset ID missing', { status: 400 });

    const asset = await prisma.asset.findUnique({
      where: { id: assetId, clerkOrganizationId: orgId },
      include: { assignedTo: { select: { firstName: true, lastName: true, email: true, imageUrl: true, clerkUserId: true }} },
    });

    if (!asset) return new NextResponse('Asset not found or not part of this organization', { status: 404 });

    if (orgRole !== 'org:admin' && asset.assignedToClerkUserId !== userId) {
      return new NextResponse('Forbidden: You do not have access to this asset', { status: 403 });
    }

    return NextResponse.json(asset);
  } catch (error) {
    console.error('[ASSET_ID_GET]', error);
    return new NextResponse('Internal Server Error', { status: 500 });
  }
}

export async function PUT(req: Request, { params }: Params) {
  try {
    const { userId, orgId, orgRole } = await auth(); // Correct destructuring and await auth()
    const { assetId } = params;
    const body = await req.json();
    const {
      title, model, serialNumber, imageBase64, // Expect base64 for image update
      description, status,
      latitude, longitude, assignedToClerkUserId, removeImage, // Flag to remove image
    } = body;

    if (!userId) return new NextResponse('Unauthorized', { status: 401 });
    if (!orgId) return new NextResponse('No active organization selected', { status: 400 });
    if (!assetId) return new NextResponse('Asset ID missing', { status: 400 });

    const assetToUpdate = await prisma.asset.findUnique({
      where: { id: assetId, clerkOrganizationId: orgId },
    });

    if (!assetToUpdate) return new NextResponse('Asset not found or not part of this organization', { status: 404 });

    if (orgRole !== 'org:admin') {
       return new NextResponse('Forbidden: Insufficient role to update', { status: 403 });
    }
    
    let assignedToDbUserId: string | null | undefined = undefined; 
    if (assignedToClerkUserId === null) { 
        assignedToDbUserId = null;
    } else if (assignedToClerkUserId) { 
      const { user: assignee } = await getUserById({ clerkUserId: assignedToClerkUserId });
      if (!assignee) {
        return new NextResponse(`Assignee user with Clerk ID ${assignedToClerkUserId} not found in local DB`, { status: 404 });
      }
      if (orgId && assignedToClerkUserId) { 
        const memberships = await clerkClient.users.getOrganizationMembershipList({ userId: assignedToClerkUserId });
        if (!memberships.some(mem => mem.organization.id === orgId)) {
          return new NextResponse('Assignee is not a member of this organization.', { status: 400 });
        }
      }
      assignedToDbUserId = assignee.id;
    }

    let newImageUrl: string | null | undefined = undefined; // undefined means no change, null means remove

    if (removeImage) {
        if (assetToUpdate.imageUrl) {
            const publicId = getPublicIdFromUrl(assetToUpdate.imageUrl);
            if (publicId) {
                try {
                    await deleteFromCloudinary(publicId);
                } catch (deleteError) {
                    console.error("Cloudinary: Error deleting old image", deleteError);
                    // Decide if this should be a hard fail or just a warning
                }
            }
        }
        newImageUrl = null; // Set to null to remove from DB
    } else if (imageBase64) { // If new image is provided
        // Delete old image if it exists
        if (assetToUpdate.imageUrl) {
            const publicId = getPublicIdFromUrl(assetToUpdate.imageUrl);
             if (publicId) {
                try {
                    await deleteFromCloudinary(publicId);
                } catch (deleteError) {
                    console.error("Cloudinary: Error deleting old image before new upload", deleteError);
                }
            }
        }
        // Upload new image
        try {
            const uploadResult = await uploadToCloudinary(imageBase64, 'assets');
            newImageUrl = uploadResult.secure_url;
        } catch (uploadError) {
            console.error('Cloudinary upload failed during update:', uploadError);
            return new NextResponse('Image upload failed', { status: 500 });
        }
    }


    const updatedAsset = await prisma.asset.update({
      where: { id: assetId },
      data: {
        ...(title && { title }),
        ...(model && { model }),
        ...(serialNumber && { serialNumber }),
        ...(newImageUrl !== undefined && { imageUrl: newImageUrl }), // Update image URL if changed or removed
        ...(description && { description }),
        ...(status && { status }),
        latitude: latitude !== undefined ? parseFloat(latitude) : undefined,
        longitude: longitude !== undefined ? parseFloat(longitude) : undefined,
        ...(assignedToClerkUserId !== undefined && { 
            assignedToClerkUserId: assignedToClerkUserId,
            assignedToDbUserId: assignedToDbUserId,
        })
      },
    });

    return NextResponse.json(updatedAsset);
  } catch (error) {
    console.error('[ASSET_ID_PUT]', error);
     if (error instanceof Prisma.PrismaClientKnownRequestError && error.code === 'P2002' && error.meta?.target === 'Asset_serialNumber_key') {
      return new NextResponse('Serial number already exists for another asset.', { status: 409 });
    }
    return new NextResponse('Internal Server Error', { status: 500 });
  }
}

export async function DELETE(req: Request, { params }: Params) {
  try {
    const { userId, orgId, orgRole } = await auth(); // Correct destructuring and await auth()
    const { assetId } = params;

    if (!userId) return new NextResponse('Unauthorized', { status: 401 });
    if (!orgId) return new NextResponse('No active organization selected', { status: 400 });
    if (!assetId) return new NextResponse('Asset ID missing', { status: 400 });
    
    const assetToDelete = await prisma.asset.findUnique({
      where: { id: assetId, clerkOrganizationId: orgId },
    });

    if (!assetToDelete) return new NextResponse('Asset not found or not part of this organization', { status: 404 });

    if (orgRole !== 'org:admin') {
      return new NextResponse('Forbidden: Insufficient role', { status: 403 });
    }

    // Delete image from Cloudinary if it exists
    if (assetToDelete.imageUrl) {
      const publicId = getPublicIdFromUrl(assetToDelete.imageUrl);
      if (publicId) {
        try {
          await deleteFromCloudinary(publicId);
        } catch (deleteError) {
          console.error("Cloudinary: Error deleting image during asset deletion", deleteError);
          // You might decide to log this but still proceed with DB deletion
        }
      }
    }

    await prisma.asset.delete({ where: { id: assetId } });
    return new NextResponse('Asset deleted', { status: 200 });
  } catch (error) {
    console.error('[ASSET_ID_DELETE]', error);
    return new NextResponse('Internal Server Error', { status: 500 });
  }
}

=== Folder: /c/Users/hp/desktop/clerk-webhooks/app/api/me ===
--- File: route.ts ---
import { NextResponse } from 'next/server'
import { auth } from '@clerk/nextjs/server'

export async function GET() {
  const { userId } = auth()

  if (!userId) {
    return new NextResponse('Unauthorized', { status: 401 })
  }

  return NextResponse.json({ userId }, { status: 200 })
}


=== Folder: /c/Users/hp/desktop/clerk-webhooks/app/api/notifications ===
--- File: route.ts ---
// app/api/notifications/route.ts
import { NextResponse } from 'next/server';
import { createClerkClient } from '@clerk/clerk-sdk-node'; // Use the Node SDK
import prisma from '@/lib/prisma';

// Initialize Clerk client (ensure CLERK_SECRET_KEY is in your .env)
const clerkClient = createClerkClient({ secretKey: process.env.CLERK_SECRET_KEY });

async function getUserIdFromToken(req: Request): Promise<string | null> {
  const authHeader = req.headers.get('Authorization');
  if (!authHeader || !authHeader.startsWith('Bearer ')) {
    console.error('[API Auth] Authorization header missing or not Bearer');
    return null;
  }
  const token = authHeader.split(' ')[1];
  try {
    if (!clerkClient) { // Add a check for clerkClient initialization
      console.error('[API Auth] Clerk client not initialized. Check CLERK_SECRET_KEY.');
      return null;
    }
    const decoded = await clerkClient.verifyToken(token);
    return decoded.sub; // 'sub' claim is the userId
  } catch (error) {
    console.error('[API Auth] Token verification failed:', error);
    return null;
  }
}

export async function GET(req: Request) {
  try {
    const currentClerkUserId = await getUserIdFromToken(req);

    if (!currentClerkUserId) {
      return new NextResponse(JSON.stringify({ message: 'Authentication failed - Invalid or missing token' }), { status: 401 });
    }

    const notifications = await prisma.notification.findMany({
      where: {
        recipientClerkUserId: currentClerkUserId, 
      },
      orderBy: {
        createdAt: 'desc',
      },
      include: {
        asset: {
          select: {
            id: true,
            title: true,
          },
        },
      },
      take: 50,
    });

    return NextResponse.json(notifications);

  } catch (error) {
    console.error('[API /api/notifications GET] Error fetching notifications:', error);
    return new NextResponse(JSON.stringify({ message: 'Internal server error' }), { status: 500 });
  }
}

export async function PATCH(req: Request) {
  try {
    const currentClerkUserId = await getUserIdFromToken(req);

    if (!currentClerkUserId) {
      return new NextResponse(JSON.stringify({ message: 'Authentication failed - Invalid or missing token' }), { status: 401 });
    }

    const { notificationIds, readStatus } = await req.json();

    if (!Array.isArray(notificationIds) || notificationIds.length === 0 || typeof readStatus !== 'boolean') {
      return new NextResponse(JSON.stringify({ message: 'Invalid request body. Expecting notificationIds (array) and readStatus (boolean).' }), { status: 400 });
    }

    const updatedNotifications = await prisma.notification.updateMany({
      where: {
        id: { in: notificationIds },
        recipientClerkUserId: currentClerkUserId, 
      },
      data: {
        read: readStatus,
        updatedAt: new Date(),
      },
    });

    return NextResponse.json({ message: `${updatedNotifications.count} notifications updated.`, count: updatedNotifications.count });

  } catch (error) {
    console.error('[API /api/notifications PATCH] Error updating notifications:', error);
    if (error instanceof SyntaxError) {
        return new NextResponse(JSON.stringify({ message: 'Invalid JSON in request body.' }), { status: 400 });
    }
    return new NextResponse(JSON.stringify({ message: 'Internal server error' }), { status: 500 });
  }
}


=== Folder: /c/Users/hp/desktop/clerk-webhooks/app/api/reports/generate ===
--- File: route.ts ---
import { NextResponse } from 'next/server';
import { auth, clerkClient } from '@clerk/nextjs/server';
import prisma from '@/lib/prisma'; 
import { GoogleGenerativeAI, HarmCategory, HarmBlockThreshold } from "@google/generative-ai";
import { Document, Packer, Paragraph, Table, TableRow, TableCell, WidthType, HeadingLevel } from 'docx';
import { PDFDocument, StandardFonts, rgb, PageSizes } from 'pdf-lib'; 
import ExcelJS from 'exceljs';

interface ReportParams {
  type: 'all_assets' | 'asset_assignments' | 'asset_status_summary';
  format: 'word' | 'pdf' | 'excel';
  orgId: string;
  statusFilter?: string;
  dateFrom?: string;
  dateTo?: string;
}

if (!process.env.GEMINI_API_KEY) {
  console.error("GEMINI_API_KEY is not set. AI features will be impacted.");
}
const genAI = process.env.GEMINI_API_KEY ? new GoogleGenerativeAI(process.env.GEMINI_API_KEY) : null;
const model = genAI ? genAI.getGenerativeModel({ model: "gemini-1.5-flash"}) : null;

const generationConfig = {
  temperature: 0.7,
  topK: 1,
  topP: 1,
  maxOutputTokens: 2048,
};
const safetySettings = [
  { category: HarmCategory.HARM_CATEGORY_HARASSMENT, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
  { category: HarmCategory.HARM_CATEGORY_HATE_SPEECH, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
  { category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
  { category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
];

export async function POST(req: Request) {
  try {
    console.log('[API /api/reports/generate] Received request');
    const { userId, orgId: orgIdFromAuth } = auth();
    const params: ReportParams = await req.json();

    const currentOrgId = params.orgId; 

    if (!currentOrgId) {
      return new NextResponse(JSON.stringify({ message: 'Organization ID is required.' }), { status: 400 });
    }
    console.log(`[API /api/reports/generate] Generating report for orgId: ${currentOrgId}, type: ${params.type}, format: ${params.format}`);

    let organizationName = 'Your Organization'; 
    try {
      const org = await clerkClient.organizations.getOrganization({ organizationId: currentOrgId });
      organizationName = org.name || organizationName;
    } catch (error) {
      console.warn(`[API /api/reports/generate] Could not fetch organization name for ${currentOrgId}:`, error);
    }

    let data: any[] | Record<string, any> = [];
    let geminiPrompt = '';
    const filters: any = {};
    if (params.statusFilter) filters.status = params.statusFilter; 
    if (params.dateFrom || params.dateTo) {
      filters.createdAt = {};
      if (params.dateFrom) filters.createdAt.gte = new Date(params.dateFrom);
      if (params.dateTo) filters.createdAt.lte = new Date(params.dateTo);
    }

    switch (params.type) {
      case 'all_assets':
        data = await prisma.asset.findMany({
          where: { clerkOrganizationId: currentOrgId, ...filters }, 
          include: { assignedTo: true }, 
        });
        geminiPrompt = `Analyze the following complete asset list for ${organizationName}. Provide key insights on asset distribution, status overview, and potential areas for optimization or concern based on this data:\n\n${JSON.stringify(data.map((a:any) => ({ name: a.name, status: a.status, assignedTo: a.assignedTo?.firstName + ' ' + a.assignedTo?.lastName })), null, 2)}`;
        break;
      case 'asset_assignments':
        data = await prisma.asset.findMany({
          where: {
            clerkOrganizationId: currentOrgId, 
            assignedToClerkUserId: { not: null }, 
            ...filters
          },
          include: { assignedTo: true, assignmentHistory: { orderBy: { assignedAt: 'desc' }, take: 1 } },
        });
        geminiPrompt = `Analyze the asset assignment data for ${organizationName}. Focus on assignment patterns, utilization, and identify any assets that might be over/under-utilized or assigned to users who might not need them. Data:\n\n${JSON.stringify(data.map((a:any) => ({ name: a.name, assignedTo: a.assignedTo?.firstName + ' ' + a.assignedTo?.lastName, status: a.status, lastAssigned: a.assignmentHistory[0]?.assignedAt })), null, 2)}`;
        break;
      case 'asset_status_summary':
        const summary = await prisma.asset.groupBy({
          by: ['status'], 
          where: { 
            clerkOrganizationId: currentOrgId, 
            ...(params.statusFilter ? { status: params.statusFilter } : {}) 
          },
          _count: { id: true }, 
        });
        data = summary.reduce((acc, curr) => { 
          acc[curr.status] = curr._count.id; 
          return acc;
        }, {} as Record<string, any>);
        geminiPrompt = `Analyze this asset status summary for ${organizationName}. Provide insights into the distribution of assets across different statuses and highlight any potential issues or areas needing attention based on these counts:\n\n${JSON.stringify(data, null, 2)}`;
        break;
      default:
        return new NextResponse(JSON.stringify({ message: 'Invalid report type' }), { status: 400 });
    }

    let aiAnalysisText = "AI analysis could not be generated or is disabled.";
    if (model && geminiPrompt) {
      try {
        console.log(`[API /api/reports/generate] Sending prompt to Gemini for ${params.type}`);
        const result = await model.generateContentStream([{ text: geminiPrompt }], { generationConfig, safetySettings });
        let textResponse = ""; 
        for await (const chunk of result.stream) { 
            textResponse += chunk.text(); 
        }
        aiAnalysisText = textResponse.trim() || "AI analysis completed, but no specific observations were returned.";
        console.log(`[API /api/reports/generate] Gemini analysis received for ${params.type}`);
      } catch (geminiError) {
        console.error("[API /api/reports/generate] Error calling Gemini API:", geminiError);
        aiAnalysisText = "Error occurred while generating AI analysis. Please check server logs.";
      }
    } else if (!model) {
      console.warn("[API /api/reports/generate] Gemini model not initialized. Skipping AI analysis.");
    }

    let fileBuffer: Buffer;
    let contentType: string;
    const reportTitleText = `${params.type.replace(/_/g, ' ').toUpperCase()} REPORT`;
    const generatedDateText = new Date().toLocaleDateString();
    const orgNameSlug = (organizationName || 'organization').toLowerCase().replace(/\s+/g, '_');
    let filename = `${orgNameSlug}_${params.type}_report_${new Date().toISOString().split('T')[0]}`;

    switch (params.format) {
      case 'word':
        contentType = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';
        filename += '.docx';
        const docChildren = [
          new Paragraph({ text: reportTitleText, heading: HeadingLevel.TITLE }),
          new Paragraph({ text: `Organization: ${organizationName}` }),
          new Paragraph({ text: `Generated on: ${generatedDateText}` }),
          new Paragraph({ text: "AI Analysis:", heading: HeadingLevel.HEADING_1 }),
          new Paragraph(aiAnalysisText),
          new Paragraph({ text: "Data:", heading: HeadingLevel.HEADING_1 }),
        ];
        if (params.type === 'asset_assignments' && Array.isArray(data) && data.length > 0) {
          const tableRows = [
            new TableRow({
              children: [
                new TableCell({ children: [new Paragraph("Asset Name")] }),
                new TableCell({ children: [new Paragraph("Serial Number")] }),
                new TableCell({ children: [new Paragraph("Status")] }),
                new TableCell({ children: [new Paragraph("Assigned To")] }),
                new TableCell({ children: [new Paragraph("Assignment Date")] }),
              ],
            }),
            ...data.map((item: any) => new TableRow({
              children: [
                new TableCell({ children: [new Paragraph(item.name || 'N/A')] }),
                new TableCell({ children: [new Paragraph(item.serialNumber || 'N/A')] }),
                new TableCell({ children: [new Paragraph(item.status || 'N/A')] }),
                new TableCell({ children: [new Paragraph(item.assignedTo ? `${item.assignedTo.firstName} ${item.assignedTo.lastName}` : (item.customAssignedTo || 'Unassigned'))] }),
                new TableCell({ children: [new Paragraph(item.assignmentHistory?.[0]?.assignedAt ? new Date(item.assignmentHistory[0].assignedAt).toLocaleDateString() : 'N/A')] }),
              ],
            })),
          ];
          docChildren.push(new Table({ rows: tableRows, width: { size: 100, type: WidthType.PERCENTAGE } }));
        } else {
          docChildren.push(new Paragraph(JSON.stringify(data, null, 2)));
        }
        const doc = new Document({ sections: [{ children: docChildren }] });
        fileBuffer = await Packer.toBuffer(doc);
        break;

      case 'pdf':
        contentType = 'application/pdf';
        filename += '.pdf';
        const pdfDoc = await PDFDocument.create();
        let page = pdfDoc.addPage(PageSizes.A4);
        const { width, height } = page.getSize();
        const font = await pdfDoc.embedFont(StandardFonts.Helvetica);
        const boldFont = await pdfDoc.embedFont(StandardFonts.HelveticaBold);
        const fontSize = 10;
        const margin = 50;
        let y = height - margin;

        const drawTextLine = (text: string, f = font, size = fontSize, color = rgb(0,0,0), spacing = 3) => {
          // Sanitize the input text: normalize all newlines (CRLF, LF) to LF, then replace LF with a space.
          const txt = String(text).replace(/\r\n/g, '\n').replace(/\n/g, ' ');
          const lines = [];
          let currentLine = txt;
          while (f.widthOfTextAtSize(currentLine, size) > width - 2 * margin) {
            let breakPoint = currentLine.length;
            while (f.widthOfTextAtSize(currentLine.substring(0, breakPoint), size) > width - 2 * margin && breakPoint > 0) {
              breakPoint--;
            }
            let actualBreakPoint = currentLine.substring(0, breakPoint).lastIndexOf(' ');
            if (actualBreakPoint <= 0) actualBreakPoint = breakPoint; 
            lines.push(currentLine.substring(0, actualBreakPoint));
            currentLine = currentLine.substring(actualBreakPoint).trimStart();
          }
          lines.push(currentLine);
          for (const line of lines) {
            if (y < margin + size) { page = pdfDoc.addPage(PageSizes.A4); y = height - margin; }
            page.drawText(line, { x: margin, y, font: f, size, color });
            y -= (size + spacing);
          }
          return y;
        };

        y = drawTextLine(reportTitleText, boldFont, 18, rgb(0,0,0), 10);
        y = drawTextLine(`Organization: ${organizationName}`, font, 12, rgb(0.2,0.2,0.2), 5);
        y = drawTextLine(`Generated on: ${generatedDateText}`, font, 12, rgb(0.2,0.2,0.2), 10);
        
        y = drawTextLine("AI Analysis:", boldFont, 14, rgb(0,0,0), 5);
        y = drawTextLine(aiAnalysisText, font, fontSize, rgb(0.3,0.3,0.3), 3);
        y -= 10; 

        y = drawTextLine("Data:", boldFont, 14, rgb(0,0,0), 5);
        const dataString = JSON.stringify(data, null, 2);
        y = drawTextLine(dataString, font, 8, rgb(0.4,0.4,0.4), 2);

        const pdfBytes = await pdfDoc.save();
        fileBuffer = Buffer.from(pdfBytes);
        break;

      case 'excel':
        contentType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
        filename += '.xlsx';
        const workbook = new ExcelJS.Workbook();
        const worksheet = workbook.addWorksheet('Report');
        let currentRow = 1;

        worksheet.getCell(currentRow, 1).value = reportTitleText;
        worksheet.getCell(currentRow, 1).font = { size: 16, bold: true };
        currentRow++;
        worksheet.getCell(currentRow, 1).value = `Organization: ${organizationName}`;
        currentRow++;
        worksheet.getCell(currentRow, 1).value = `Generated on: ${generatedDateText}`;
        currentRow += 2;

        worksheet.getCell(currentRow, 1).value = "AI Analysis:";
        worksheet.getCell(currentRow, 1).font = { bold: true };
        currentRow++;
        const analysisCell = worksheet.getCell(currentRow, 1);
        analysisCell.value = aiAnalysisText;
        analysisCell.alignment = { wrapText: true };
        const analysisLines = aiAnalysisText.split('\n').length;
        const numChars = aiAnalysisText.length;
        const estimatedRowsForAnalysis = Math.max(analysisLines, Math.ceil(numChars / 80)); 
        worksheet.getRow(currentRow).height = estimatedRowsForAnalysis * 15; 
        currentRow += 2; 

        worksheet.getCell(currentRow, 1).value = "Data:";
        worksheet.getCell(currentRow, 1).font = { bold: true };
        currentRow++;

        if (Array.isArray(data) && data.length > 0) {
          const headers = Object.keys(data[0] || {}).map(header => 
            header.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())
          );
          worksheet.getRow(currentRow).values = headers;
          worksheet.getRow(currentRow).font = { bold: true };
          currentRow++;
          data.forEach((item: any) => {
            const rowValues = Object.values(item).map(val => {
              if (val instanceof Date) return val.toLocaleDateString();
              if (typeof val === 'object' && val !== null) return JSON.stringify(val);
              return val;
            });
            worksheet.addRow(rowValues);
          });
        } else if (typeof data === 'object' && data !== null && Object.keys(data).length > 0) {
          Object.entries(data).forEach(([key, value]) => {
            worksheet.addRow([key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase()), value]);
          });
        } else {
          worksheet.getCell(currentRow, 1).value = "No data available.";
        }
        
        worksheet.columns.forEach(column => {
          let maxLength = 0;
          column.eachCell!({ includeEmpty: true }, cell => {
            const columnLength = cell.value ? String(cell.value).length : 10;
            if (columnLength > maxLength) {
              maxLength = columnLength;
            }
          });
          column.width = maxLength < 10 ? 10 : maxLength > 50 ? 50 : maxLength + 2;
        });

        fileBuffer = Buffer.from(await workbook.xlsx.writeBuffer());
        break;

      default:
        console.error(`[API /api/reports/generate] Invalid report format: ${params.format}`);
        return new NextResponse(JSON.stringify({ message: 'Invalid report format specified.' }), { status: 400 });
    }

    console.log(`[API /api/reports/generate] Sending file: ${filename}, Type: ${contentType}, Size: ${fileBuffer.length} bytes`);
    const responseHeaders = new Headers();
    responseHeaders.set('Content-Type', contentType);
    responseHeaders.set('Content-Disposition', `attachment; filename="${filename}"`);

    return new NextResponse(fileBuffer, { status: 200, headers: responseHeaders });

  } catch (error: any) {
    console.error('[API /api/reports/generate] Error generating report:', error);
    return new NextResponse(JSON.stringify({ message: 'Failed to generate report', error: error.message }), { status: 500 });
  }
}

=== Folder: /c/Users/hp/desktop/clerk-webhooks/app/api/webhooks/clerk ===
--- File: route.ts ---
import { Webhook } from 'svix';
import { headers } from 'next/headers';
import { NextRequest, NextResponse } from 'next/server';
import { WebhookEvent } from '@clerk/nextjs/server';
import prisma from '@/lib/prisma';
import { createUser, UpdateUser } from '@/lib/users'; // Assuming UpdateUser exists and works by clerkUserId
import { UserJSON, OrganizationJSON, OrganizationMembershipJSON, EmailJSON, OrganizationInvitationJSON } from "@clerk/nextjs/server";


const WEBHOOK_SECRET = process.env.CLERK_WEBHOOK_SIGNING_SECRET;

export async function POST(req: NextRequest) {
  if (!WEBHOOK_SECRET) {
    console.error('CLERK_WEBHOOK_SECRET not set');
    return new NextResponse('Internal Server Error: Webhook secret not configured', { status: 500 });
  }

  // Get the headers
  const headerPayload = headers();
  const svix_id = headerPayload.get("svix-id");
  const svix_timestamp = headerPayload.get("svix-timestamp");
  const svix_signature = headerPayload.get("svix-signature");

  if (!svix_id || !svix_timestamp || !svix_signature) {
    return new NextResponse('Error occurred -- no svix headers', { status: 400 });
  }

  // Get the body
  let payload;
  try {
      payload = await req.json();
  } catch (error) {
      console.error("Error parsing webhook payload:", error);
      return new NextResponse('Invalid payload', { status: 400 });
  }
  
  const body = JSON.stringify(payload);
  const wh = new Webhook(WEBHOOK_SECRET);
  let evt: WebhookEvent;

  try {
    evt = wh.verify(body, {
      "svix-id": svix_id,
      "svix-timestamp": svix_timestamp,
      "svix-signature": svix_signature,
    }) as WebhookEvent;
  } catch (err) {
    console.error('Error verifying webhook:', err);
    return new NextResponse('Error occurred verifying webhook', { status: 400 });
  }

  const eventType = evt.type;
  console.log(`Received webhook event: ${eventType}`, evt.data);

  try {
    switch (eventType) {
      // USER EVENTS
      case 'user.created': {
        const { id, email_addresses, first_name, last_name, image_url, public_metadata } = evt.data as UserJSON;
        if (!id || !email_addresses || email_addresses.length === 0) {
          return new NextResponse('Error: Missing user ID or email for user.created', { status: 400 });
        }
        await createUser({
          clerkUserId: id,
          email: email_addresses[0].email_address,
          firstName: first_name || '',
          lastName: last_name || '',
          imageUrl: image_url || '',
          // role: (public_metadata?.role as string) || 'user', // Example, if you set role in public_metadata
        });
        console.log(`User ${id} created in local DB.`);
        break;
      }
      case 'user.updated': {
        const { id, email_addresses, first_name, last_name, image_url, public_metadata } = evt.data as UserJSON;
        if (!id) return new NextResponse('Error: Missing user ID for user.updated', { status: 400 });
        
        // Find user by clerkUserId and update
        const userToUpdate = await prisma.user.findUnique({ where: { clerkUserId: id } });
        if (userToUpdate) {
            await prisma.user.update({
                where: { clerkUserId: id },
                data: {
                    email: email_addresses && email_addresses.length > 0 ? email_addresses[0].email_address : userToUpdate.email,
                    firstName: first_name || userToUpdate.firstName,
                    lastName: last_name || userToUpdate.lastName,
                    imageUrl: image_url || userToUpdate.imageUrl,
                    // role: (public_metadata?.role as string) || userToUpdate.role,
                },
            });
            console.log(`User ${id} updated in local DB.`);
        } else {
            console.warn(`User ${id} not found in local DB for update.`);
             // Optionally, create if not found (upsert logic)
        }
        break;
      }
      case 'user.deleted': {
        const { id, deleted } = evt.data as UserJSON; // Check if 'deleted' field is true
        if (!id) return new NextResponse('Error: Missing user ID for user.deleted', { status: 400 });
        if (deleted) { // Clerk sometimes sends user.deleted with deleted: false for soft deletes
            try {
                await prisma.user.delete({ where: { clerkUserId: id } });
                console.log(`User ${id} deleted from local DB.`);
                 // You might also need to handle unassigning assets, etc.
            } catch (error: any) {
                if (error.code === 'P2025') { // Prisma's Record to delete does not exist
                    console.warn(`User ${id} not found in local DB for deletion, or already deleted.`);
                } else {
                    throw error; // Re-throw other errors
                }
            }
        } else {
             console.log(`User ${id} soft deleted or deletion event received with deleted:false.`);
        }
        break;
      }

      // EMAIL EVENTS (Mostly for logging or internal state, less likely to interact with core DB models directly)
      case 'email.created': {
        const emailData = evt.data as EmailJSON;
        console.log(`Email created: ID ${emailData.id}, To: ${emailData.to_email_address}, Status: ${emailData.status}`);
        // Example: Log this event, or update some notification status if relevant
        break;
      }

      // ORGANIZATION EVENTS
      case 'organization.created': {
        const orgData = evt.data as OrganizationJSON;
        // Example: if you have an Organization model in Prisma
        // This is a simplified example, adapt to your Prisma schema
        await prisma.organization.create({
          data: {
            clerkOrgId: orgData.id,
            name: orgData.name,
            slug: orgData.slug || undefined, // orgData.slug can be null
            imageUrl: orgData.image_url || undefined,
            // createdBy: orgData.created_by, // if you store this
          },
        }).catch(e => console.error("Failed to create org in DB:", e));
        console.log(`Organization ${orgData.id} created.`);
        break;
      }
      case 'organization.updated': {
        const orgData = evt.data as OrganizationJSON;
        await prisma.organization.update({
          where: { clerkOrgId: orgData.id },
          data: {
            name: orgData.name,
            slug: orgData.slug || undefined,
            imageUrl: orgData.image_url || undefined,
            // ... other fields
          },
        }).catch(e => console.warn("Failed to update org in DB or org not found:", e));
        console.log(`Organization ${orgData.id} updated.`);
        break;
      }
      case 'organization.deleted': {
        const orgData = evt.data as OrganizationJSON; // Contains id, object, slug, name
        try {
            await prisma.organization.delete({ where: { clerkOrgId: orgData.id } });
            console.log(`Organization ${orgData.id} deleted from local DB.`);
            // Cascade delete related assets or handle them (e.g., unassign, archive)
            await prisma.asset.updateMany({
                where: { clerkOrganizationId: orgData.id },
                data: { 
                    clerkOrganizationId: null, // Or handle as per your logic, maybe delete assets too
                    assignedToClerkUserId: null,
                    assignedToDbUserId: null,
                    status: "Archived" // Example
                } 
            });
            console.log(`Assets under organization ${orgData.id} updated/archived.`);
        } catch (error: any) {
            if (error.code === 'P2025') {
                 console.warn(`Organization ${orgData.id} not found in local DB for deletion.`);
            } else {
                console.error("Error deleting organization or its assets:", error);
            }
        }
        break;
      }

      // ORGANIZATION MEMBERSHIP EVENTS
      case 'organizationMembership.created': {
        const memberData = evt.data as OrganizationMembershipJSON;
        console.log(`Membership created: User ${memberData.public_user_data?.user_id} in Org ${memberData.organization.id} as ${memberData.role}`);
        // Example: If you track memberships locally or need to update user's org role
        // const user = await prisma.user.findUnique({ where: { clerkUserId: memberData.public_user_data.user_id }});
        // if (user) { /* update user's organization specific role if you store that */ }
        break;
      }
      case 'organizationMembership.deleted': {
        const memberData = evt.data as OrganizationMembershipJSON;
        console.log(`Membership deleted: User ${memberData.public_user_data?.user_id} from Org ${memberData.organization.id}`);
        // Example: Update user's local state, unassign assets if they were tied to this specific org membership role
        break;
      }
      case 'organizationMembership.updated': {
        const memberData = evt.data as OrganizationMembershipJSON;
        console.log(`Membership updated: User ${memberData.public_user_data?.user_id} in Org ${memberData.organization.id}, new role ${memberData.role}`);
        // Example: Update user's role within the organization in your local DB
        break;
      }
      
      // ORGANIZATION INVITATION EVENTS
      case 'organizationInvitation.accepted': {
        const invData = evt.data as OrganizationInvitationJSON;
        console.log(`Invitation accepted: Email ${invData.email_address} for Org ${invData.organization_id}, User ID ${invData.public_metadata?.user_id}`);
        break;
      }
      case 'organizationInvitation.created':{
        const invData = evt.data as OrganizationInvitationJSON;
        console.log(`Invitation created: Email ${invData.email_address} for Org ${invData.organization_id} by ${invData.inviter_user_id}`);
        break;
      }
      case 'organizationInvitation.revoked':{
        const invData = evt.data as OrganizationInvitationJSON;
        console.log(`Invitation revoked: Email ${invData.email_address} for Org ${invData.organization_id}`);
        break;
      }

      // Note: organizationDomain, permission, role events are less common to sync directly unless you have a complex local RBAC mirror.
      // For now, just log them. Expand if needed.
      case 'organizationDomain.created':
      case 'organizationDomain.deleted':
      case 'organizationDomain.updated':
      case 'permission.created':
      case 'permission.deleted':
      case 'permission.updated':
      case 'role.created': // Clerk's built-in roles, not your app-specific roles if any
      case 'role.deleted':
      case 'role.updated':
        console.log(`Received ${eventType}: ID ${evt.data.id}`);
        // Implement specific logic if you need to sync these to your DB
        break;

      default:
        console.warn(`Unhandled webhook event type: ${eventType}`);
    }
  } catch (error) {
    console.error(`Error processing webhook ${eventType}:`, error);
    // It's generally better to return 200 to Clerk even if processing fails on your end
    // to prevent Clerk from resending the webhook repeatedly for a persistent processing error.
    // Log the error thoroughly for investigation.
    // However, for critical creation/deletion errors, you might reconsider.
    // For this example, we'll return 500 if an error occurs during processing for clarity.
    return new NextResponse('Error processing webhook', { status: 500 });
  }

  return new NextResponse('Webhook received and processed', { status: 200 });
}


=== Folder: /c/Users/hp/desktop/clerk-webhooks/app ===
--- File: globals.css ---
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 224 71.4% 4.1%;

    --card: 0 0% 100%;
    --card-foreground: 224 71.4% 4.1%;

    --popover: 0 0% 100%;
    --popover-foreground: 224 71.4% 4.1%;

    --primary: 220.9 39.3% 11%;
    --primary-foreground: 210 20% 98%;

    --secondary: 220 14.3% 95.9%;
    --secondary-foreground: 220.9 39.3% 11%;

    --muted: 220 14.3% 95.9%;
    --muted-foreground: 220 8.9% 46.1%;

    --accent: 220 14.3% 95.9%;
    --accent-foreground: 220.9 39.3% 11%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 20% 98%;

    --border: 220 13% 91%;
    --input: 220 13% 91%;
    --ring: 224 71.4% 4.1%;

    --radius: 0.5rem;
  }

  .dark {
    --background: 224 71.4% 4.1%;
    --foreground: 210 20% 98%;

    --card: 224 71.4% 4.1%;
    --card-foreground: 210 20% 98%;

    --popover: 224 71.4% 4.1%;
    --popover-foreground: 210 20% 98%;

    --primary: 210 20% 98%;
    --primary-foreground: 220.9 39.3% 11%;

    --secondary: 215 27.9% 16.9%;
    --secondary-foreground: 210 20% 98%;

    --muted: 215 27.9% 16.9%;
    --muted-foreground: 217.9 10.6% 64.9%;

    --accent: 215 27.9% 16.9%;
    --accent-foreground: 210 20% 98%;

    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 20% 98%;

    --border: 215 27.9% 16.9%;
    --input: 215 27.9% 16.9%;
    --ring: 216 12.2% 83.9%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

=== Folder: /c/Users/hp/desktop/clerk-webhooks/app ===
--- File: layout.tsx ---
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import { ClerkProvider } from '@clerk/nextjs';
import { Toaster } from 'sonner';
import { ThemeProvider } from "@/components/ThemeProvider";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Asset Scout - Manage Your Assets Efficiently",
  description: "Asset tracking and management platform for modern organizations.",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <ClerkProvider>
      <html lang="en" suppressHydrationWarning>
        <body className={`${inter.className} bg-white dark:bg-slate-900`}>
          <ThemeProvider
            attribute="class"
            defaultTheme="system"
            enableSystem
            disableTransitionOnChange
          >
            {children}
            <Toaster />
          </ThemeProvider>
        </body>
      </html>
    </ClerkProvider>
  );
}


=== Folder: /c/Users/hp/desktop/clerk-webhooks/app ===
--- File: page.tsx ---
import LandingHeader from '@/components/landing/LandingHeader';
import LandingFooter from '@/components/landing/LandingFooter';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import Image from 'next/image';
import { CheckCircle, ShieldCheck, BarChart, Users, Zap } from 'lucide-react'; // Example icons

// Placeholder data for testimonials - replace with actual data or fetching logic
const testimonials = [
  {
    quote: "Asset Scout has revolutionized how we track our equipment. The dashboard is intuitive and the support is top-notch!",
    name: "Priyanka Patel",
    title: "Operations Manager, Tech Solutions Inc.",
    avatar: "/placeholder-avatars/priyanka.jpg" // Replace with actual image path
  },
  {
    quote: "The ability to customize asset fields and generate reports on the fly has saved us countless hours.",
    name: "Chen Zhiying",
    title: "Facility Manager, Global Logistics Co.",
    avatar: "/placeholder-avatars/chen.jpg"
  },
  {
    quote: "We finally have a single source of truth for all our assets. Implementation was smooth and the team was very helpful.",
    name: "David Njoroge",
    title: "IT Director, Creative Minds Agency",
    avatar: "/placeholder-avatars/david.jpg"
  },
  {
    quote: "The role-based access control is crucial for our security compliance. Asset Scout delivered exactly what we needed.",
    name: "Aisha Khan",
    title: "Security Officer, FinTech Innovators",
    avatar: "/placeholder-avatars/aisha.jpg"
  }
];

export default function LandingPage() {
  return (
    <div className="flex flex-col min-h-screen bg-gray-50 dark:bg-slate-950">
      <LandingHeader />

      <main className="flex-grow">
        {/* Hero Section */}
        <section id="hero" className=" pt-20 bg-gradient-to-br from-green-50 via-emerald-50 to-teal-50 dark:from-slate-900 dark:via-slate-800 dark:to-gray-900">
          <div className="container mx-auto px-6 text-center">
            <div className="mb-3">
              <span className="inline-block bg-green-200 text-green-700 text-xs font-semibold px-3 py-1 rounded-full">
                100% Secure Asset Delivery
              </span>
            </div>
            <h1 className="text-4xl md:text-5xl lg:text-6xl font-bold text-gray-800 dark:text-white mb-6">
              Empower Your Organization <br /> with <span className="text-green-600 dark:text-green-400">Asset Scout</span>
            </h1>
            <p className="text-lg md:text-xl text-gray-600 dark:text-gray-300 max-w-2xl mx-auto mb-10">
              A unified & flexible platform to track, manage, and optimize your valuable assets. Gain insights and streamline operations for your organization.
            </p>
            <Button size="lg" asChild className="bg-green-500 hover:bg-green-600 text-white text-lg px-8 py-3">
              <Link href="/dashboard">Try Asset Scout Free</Link>
            </Button>
            <p className="text-sm text-gray-500 dark:text-gray-400 mt-4">No credit card required. Get started in minutes.</p>
            
            {/* Placeholder for the dashboard image */}
            <div className="mt-16">
              <Image 
                src="/images/landing/Frame 2147223498.png" 
                alt="Asset Scout Platform Overview"
                width={1400}
                height={2000} 
                className="rounded-lg shadow-2xl border border-gray-200 dark:border-gray-700"
                priority 
              />
            </div>
          </div>
        </section>

        {/* Trusted By Section (Placeholder) */}
        <section className="py-12 bg-white dark:bg-slate-800/50">
          <div className="container mx-auto px-6 text-center">
            <h3 className="text-sm font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wider mb-6">
              Trusted by 1000+ leading organizations worldwide
            </h3>
            {/* Add logos here */}
            <div className="flex flex-wrap justify-center items-center gap-x-8 md:gap-x-12 gap-y-4">
             <Image src="/images/landing/Container.png" alt="Asset Scout Platform Overview" width={1000} height={450} className="rounded-lg shadow-2xl border border-gray-200 dark:border-gray-700" priority />
            </div>
          </div>
        </section>

        {/* Features Section: Take Control of Your Assets */}
        <section id="features" className="py-16 md:py-24 bg-gray-50 dark:bg-slate-900">
          <div className="container mx-auto px-6">
            <div className="text-center mb-12 md:mb-16">
              <h2 className="text-3xl md:text-4xl font-bold text-gray-800 dark:text-white mb-4">Take Control of Your Assets</h2>
              <p className="text-lg text-gray-600 dark:text-gray-300 max-w-xl mx-auto">
                Manage assets effectively with a centralized platform that offers everything you need, from an insightful dashboard to robust monitoring.
              </p>
            </div>
            <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-8">
              {/* Feature 1: Insightful Dashboard */}
              <div className="bg-white dark:bg-slate-800 p-6 rounded-lg shadow-lg">
                <BarChart className="w-10 h-10 text-green-500 mb-4" />
                <h3 className="text-xl font-semibold text-gray-800 dark:text-white mb-2">Insightful Dashboard</h3>
                <p className="text-gray-600 dark:text-gray-400 text-sm">
                  Get a clear overview of your asset status, utilization, and maintenance schedules at a glance.
                </p>
              </div>
              {/* Feature 2: Role-Based Access */}
              <div className="bg-white dark:bg-slate-800 p-6 rounded-lg shadow-lg">
                <Users className="w-10 h-10 text-green-500 mb-4" />
                <h3 className="text-xl font-semibold text-gray-800 dark:text-white mb-2">Role-Based Access</h3>
                <p className="text-gray-600 dark:text-gray-400 text-sm mb-3">
                  Ensure data security and control by assigning specific roles and permissions to your team members.
                </p>
                <Image
                  src="/images/landing/Container.png"
                  alt="Illustration of Role-Based Access Control"
                  width={300} 
                  height={200} 
                  className="rounded-md mt-2 mx-auto"
                />
              </div>
              {/* Feature 3: Every Asset Counted */}
              <div className="bg-white dark:bg-slate-800 p-6 rounded-lg shadow-lg">
                <CheckCircle className="w-10 h-10 text-green-500 mb-4" />
                <h3 className="text-xl font-semibold text-gray-800 dark:text-white mb-2">Every Asset Counted</h3>
                <p className="text-gray-600 dark:text-gray-400 text-sm">
                  Capture and track every asset from purchase to disposal with detailed records and history.
                </p>
              </div>
              {/* Feature 4: Asset Monitoring */}
              <div className="bg-white dark:bg-slate-800 p-6 rounded-lg shadow-lg">
                <Zap className="w-10 h-10 text-green-500 mb-4" />
                <h3 className="text-xl font-semibold text-gray-800 dark:text-white mb-2">Asset Monitoring</h3>
                <p className="text-gray-600 dark:text-gray-400 text-sm">
                  Stay updated with real-time alerts for maintenance, location changes, or status updates.
                </p>
              </div>
            </div>
            {/* Placeholder for feature images/mockups from the landing page */}
            <div className="mt-12 grid grid-cols-1 md:grid-cols-2 gap-8 items-center">
                <div className="p-4 bg-white dark:bg-slate-800 rounded-lg shadow-xl border border-gray-200 dark:border-gray-700">
                    <Image src="/images/landing/Roles.png" alt="Asset Scout Feature Example 1" width={800} height={600} className="rounded-md" />
                </div>
                <div className="p-4 bg-white dark:bg-slate-800 rounded-lg shadow-xl border border-gray-200 dark:border-gray-700">
                    <Image src="/images/landing/Frame 1707479693 (1).png" alt="Asset Scout Feature Example 2" width={800} height={600} className="rounded-md" />
                </div>
            </div>
          </div>
        </section>

        {/* Benefits Section: Secure and Streamlined Asset Oversight */}
        <section id="benefits" className="py-16 md:py-24 bg-white dark:bg-slate-800/50">
          <div className="container mx-auto px-6">
            <div className="text-center mb-12 md:mb-16">
              <h2 className="text-3xl md:text-4xl font-bold text-gray-800 dark:text-white mb-4">Secure and Streamlined Asset Oversight</h2>
              <p className="text-lg text-gray-600 dark:text-gray-300 max-w-xl mx-auto">
                Master your asset lifecycle with features designed for privacy, security, insight, and control.
              </p>
            </div>
            <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-8">
              <div className="text-center p-4">
                <ShieldCheck className="w-12 h-12 text-green-500 mx-auto mb-4" />
                <h3 className="text-xl font-semibold text-gray-800 dark:text-white mb-2">Privacy</h3>
                <p className="text-gray-600 dark:text-gray-400 text-sm">Your data is protected with industry-leading security measures and privacy controls.</p>
              </div>
              <div className="text-center p-4">
                <CheckCircle className="w-12 h-12 text-green-500 mx-auto mb-4" />
                <h3 className="text-xl font-semibold text-gray-800 dark:text-white mb-2">Security</h3>
                <p className="text-gray-600 dark:text-gray-400 text-sm">Robust security protocols ensure your asset information is safe and accessible only to authorized users.</p>
              </div>
              <div className="text-center p-4">
                <BarChart className="w-12 h-12 text-green-500 mx-auto mb-4" />
                <h3 className="text-xl font-semibold text-gray-800 dark:text-white mb-2">Insight</h3>
                <p className="text-gray-600 dark:text-gray-400 text-sm">Gain valuable insights from your asset data to make informed decisions and optimize performance.</p>
              </div>
              <div className="text-center p-4">
                <Zap className="w-12 h-12 text-green-500 mx-auto mb-4" />
                <h3 className="text-xl font-semibold text-gray-800 dark:text-white mb-2">Control</h3>
                <p className="text-gray-600 dark:text-gray-400 text-sm">Full control over your asset data, user access, and reporting functionalities, tailored to your needs.</p>
              </div>
            </div>
          </div>
        </section>

        {/* Testimonials Section */}
        <section id="testimonials" className="py-16 md:py-24 bg-gray-50 dark:bg-slate-900">
          <div className="container mx-auto px-6">
            <div className="text-center mb-12 md:mb-16">
              <h2 className="text-3xl md:text-4xl font-bold text-gray-800 dark:text-white mb-3">Don't Take Our Word For It!</h2>
              <p className="text-lg text-gray-600 dark:text-gray-300">Hear It From Our Trusted Partners.</p>
            </div>
            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
              {testimonials.slice(0,3).map((testimonial, index) => (
                <div key={index} className="bg-white dark:bg-slate-800 p-6 rounded-lg shadow-lg border border-green-200 dark:border-green-700/50">
                  <p className="text-gray-600 dark:text-gray-300 italic mb-4">"{testimonial.quote}"</p>
                  <div className="flex items-center">
                    {/* Placeholder for avatar image */}
                    <div className="w-12 h-12 rounded-full bg-gray-200 dark:bg-gray-700 flex items-center justify-center text-green-500 font-bold text-lg mr-4">
                      {testimonial.name.charAt(0)}
                    </div>
                    <div>
                      <p className="font-semibold text-gray-800 dark:text-white">{testimonial.name}</p>
                      <p className="text-sm text-gray-500 dark:text-gray-400">{testimonial.title}</p>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </section>

        {/* Call to Action Section */}
        <section id="cta" className="py-20 md:py-32 bg-gradient-to-r from-green-500 to-emerald-600 dark:from-green-600 dark:to-emerald-700 text-white">
          <div className="container mx-auto px-6 text-center">
            <h2 className="text-3xl md:text-4xl font-bold mb-6">Take Control of Your Assets Today!</h2>
            <p className="text-lg md:text-xl max-w-xl mx-auto mb-10">
              Ready to transform your asset management? Join thousands of satisfied users and experience the Asset Scout difference.
            </p>
            <Button size="lg" variant="outline" asChild className="bg-white text-green-600 hover:bg-gray-100 border-2 border-white hover:border-gray-100 text-lg px-8 py-3 font-semibold">
              <Link href="/dashboard">Sign Up for Free</Link>
            </Button>
          </div>
        </section>

      </main>

      <LandingFooter />
    </div>
  );
}

=== Folder: /c/Users/hp/desktop/clerk-webhooks/app/protected/client ===
--- File: page.tsx ---
'use client'

import { useUser } from '@clerk/nextjs'

export default function Page() {
  const { isLoaded, isSignedIn, user } = useUser()

  if (!isLoaded || !isSignedIn) {
    return null
  }

  return (
    <section className='py-24'>
      <div className='container'>
        <h1 className='text-3xl font-bold'>This is a client-side page</h1>
        <p className='mt-4'>You are logged in as {user?.firstName}</p>
      </div>
    </section>
  )
}


=== Folder: /c/Users/hp/desktop/clerk-webhooks/app/protected/server ===
--- File: page.tsx ---
import { currentUser } from '@clerk/nextjs/server'

export default async function Page() {
  const user = await currentUser()

  return (
    <section className='py-24'>
      <div className='container'>
        <h1 className='text-3xl font-bold'>This is a server-side page</h1>
        <p className='mt-4'>You are logged in as {user?.firstName}</p>
      </div>
    </section>
  )
}


=== Folder: /c/Users/hp/desktop/clerk-webhooks/app/sign-in/[[...sign-in]] ===
--- File: page.tsx ---
import { SignIn } from '@clerk/nextjs'

export default function Page() {
  return (
    <section className='py-24'>
      <div className='container flex items-center justify-center'>
        <SignIn />
      </div>
    </section>
  )
}


=== Folder: /c/Users/hp/desktop/clerk-webhooks/app/sign-up/[[...sign-up]] ===
--- File: page.tsx ---
import { SignUp } from '@clerk/nextjs'

export default function Page() {
  return (
    <section className='py-24'>
      <div className='container flex items-center justify-center'>
        <SignUp />
      </div>
    </section>
  )
}


=== Folder: /c/Users/hp/desktop/clerk-webhooks/components/dashboard ===
--- File: AssetAssignmentBarChart.tsx ---
"use client";

import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';

interface AssetAssignmentDataPoint {
  name: string; // "Assigned" or "Unassigned"
  count: number;
}

interface AssetAssignmentBarChartProps {
  data: AssetAssignmentDataPoint[];
}

export default function AssetAssignmentBarChart({ data }: AssetAssignmentBarChartProps) {
  if (!data || data.length === 0) {
    return <div className="text-center py-4 text-gray-500 dark:text-gray-400">No assignment data available.</div>;
  }

  return (
    <div className="bg-white dark:bg-slate-800 p-6 rounded-lg h-96  dark:border-gray-700">
      <ResponsiveContainer width="100%" height="85%">
        <BarChart data={data} margin={{ top: 5, right: 20, left: 10, bottom: 5 }}>
          <CartesianGrid strokeDasharray="3 3" stroke="var(--border-color, #e5e7eb)" className="dark:stroke-slate-700" />
          <XAxis dataKey="name" stroke="var(--text-color-secondary, #6b7280)" className="dark:stroke-slate-400" />
          <YAxis stroke="var(--text-color-secondary, #6b7280)" className="dark:stroke-slate-400" />
          <Tooltip 
            cursor={{ fill: 'var(--tooltip-cursor-fill, #f3f4f6)' }} 
            contentStyle={{ 
              backgroundColor: 'var(--tooltip-bg, white)', 
              borderColor: 'var(--tooltip-border, #e5e7eb)',
              borderRadius: '0.375rem',
              color: 'var(--tooltip-text, #374151)' 
            }}
            wrapperClassName="dark:!bg-slate-700 dark:!border-slate-600 dark:[&_.recharts-tooltip-item]:!text-slate-200"
          />
          <Legend />
          <Bar dataKey="count" fill="#34bc68" />
        </BarChart>
      </ResponsiveContainer>
    </div>
  );
}


=== Folder: /c/Users/hp/desktop/clerk-webhooks/components/dashboard ===
--- File: AssetModelBarChart.tsx ---
"use client";

import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';

interface AssetModelDataPoint {
  name: string; // Asset model name
  count: number; // Count of assets of this model
}

interface AssetModelBarChartProps {
  data: AssetModelDataPoint[];
  topN?: number; // Optional: to show only top N models
}

export default function AssetModelBarChart({ data, topN = 5 }: AssetModelBarChartProps) {
  if (!data || data.length === 0) {
    return <div className="text-center py-4 text-gray-500 dark:text-gray-400">No asset model data available.</div>;
  }

  const processedData = data
    .sort((a, b) => b.count - a.count)
    .slice(0, topN);

  return (
    <div className="bg-white dark:bg-slate-800 p-6 rounded-lg h-96 dark:border-gray-700">
      <ResponsiveContainer width="100%" height="85%">
        <BarChart data={processedData} layout="vertical" margin={{ top: 5, right: 30, left: 30, bottom: 5 }}>
          <CartesianGrid strokeDasharray="3 3" stroke="var(--border-color, #e5e7eb)" className="dark:stroke-slate-700" />
          <XAxis type="number" stroke="var(--text-color-secondary, #6b7280)" className="dark:stroke-slate-400" />
          <YAxis dataKey="name" type="category" stroke="var(--text-color-secondary, #6b7280)" className="dark:stroke-slate-400" width={100} />
          <Tooltip 
            cursor={{ fill: 'var(--tooltip-cursor-fill, #f3f4f6)' }} 
            contentStyle={{ 
              backgroundColor: 'var(--tooltip-bg, white)', 
              borderColor: 'var(--tooltip-border, #e5e7eb)',
              borderRadius: '0.375rem',
              color: 'var(--tooltip-text, #374151)' 
            }}
            wrapperClassName="dark:!bg-slate-700 dark:!border-slate-600 dark:[&_.recharts-tooltip-item]:!text-slate-200"
          />
          <Legend />
          <Bar dataKey="count" fill="#efc22f" name="Asset Count" />
        </BarChart>
      </ResponsiveContainer>
    </div>
  );
}


=== Folder: /c/Users/hp/desktop/clerk-webhooks/components/dashboard ===
--- File: AssetModelDistributionChart.tsx ---
"use client";

import React from 'react';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Cell } from 'recharts';

interface ModelDataPoint {
  name: string; // Model name
  value: number; // Number of assets
}

interface AssetModelDistributionChartProps {
  data: ModelDataPoint[];
}

// Define a color palette for the bar chart segments (can be a single color or varied)
const MODEL_CHART_COLOR = '#3b82f6'; // blue-500

const AssetModelDistributionChart: React.FC<AssetModelDistributionChartProps> = ({ data }) => {
  if (!data || data.length === 0) {
    return <p className="text-center text-gray-500 py-8">No model data to display.</p>;
  }

  return (
    <ResponsiveContainer width="100%" height={300}>
      <BarChart
        data={data}
        margin={{
          top: 5,
          right: 20,
          left: 10,
          bottom: 5,
        }}
        layout="vertical" // Use vertical layout for better readability of model names
      >
        <CartesianGrid strokeDasharray="3 3" stroke="#e5e7eb" />
        <XAxis type="number" allowDecimals={false} tick={{ fontSize: 12, fill: '#6b7280' }} stroke="#d1d5db" />
        <YAxis 
          type="category" 
          dataKey="name" 
          width={120} // Adjust width to accommodate longer model names
          tick={{ fontSize: 12, fill: '#6b7280' }} 
          stroke="#d1d5db"
        />
        <Tooltip
          cursor={{ fill: 'rgba(209, 213, 219, 0.3)' }}
          contentStyle={{ backgroundColor: 'white', borderRadius: '0.375rem', borderColor: '#e5e7eb' }}
          labelStyle={{ color: '#1f2937', fontWeight: '500' }}
        />
        <Legend wrapperStyle={{ fontSize: '14px', paddingTop: '10px' }} />
        <Bar dataKey="value" name="Assets" radius={[0, 4, 4, 0]} fill={"#3b82f6"} barSize={20}>
          {/* If you want different colors per bar, map data to Cells here */}
        </Bar>
      </BarChart>
    </ResponsiveContainer>
  );
};

export default AssetModelDistributionChart;


=== Folder: /c/Users/hp/desktop/clerk-webhooks/components/dashboard ===
--- File: AssetStatusDistributionChart.tsx ---
"use client";

import React from 'react';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Cell } from 'recharts';

interface StatusDataPoint {
  name: string;
  count: number;
  fill: string;
}

interface AssetStatusDistributionChartProps {
  data: { name: string; value: number }[]; // Expects data in format: [{ name: 'Active', value: 10 }, ...]
}

const STATUS_COLORS: { [key: string]: string } = {
  'Active': '#22c55e', // green-500
  'Inactive': '#ef4444', // red-500
  'Maintenance': '#eab308', // yellow-500
  'Archived': '#6b7280', // gray-500
  'Out for Repair': '#f97316', // orange-500
  // Add more statuses and their colors as needed
};

const AssetStatusDistributionChart: React.FC<AssetStatusDistributionChartProps> = ({ data }) => {
  if (!data || data.length === 0) {
    return <p className="text-center text-gray-500 py-8">No status data to display.</p>;
  }

  const chartData: StatusDataPoint[] = data.map(item => ({
    name: item.name,
    count: item.value,
    fill: STATUS_COLORS[item.name] || STATUS_COLORS['Archived'], // Default color if status not in map
  }));

  return (
    <ResponsiveContainer width="100%" height={300}>
      <BarChart
        data={chartData}
        margin={{
          top: 5,
          right: 20, // Adjusted right margin for YAxis labels
          left: 10, // Adjusted left margin for XAxis labels
          bottom: 5,
        }}
        barGap={10} // Gap between bars of different categories
        barCategoryGap="20%" // Gap between bars of the same category (if grouped)
      >
        <CartesianGrid strokeDasharray="3 3" stroke="#e5e7eb" />
        <XAxis 
          dataKey="name" 
          tick={{ fontSize: 12, fill: '#6b7280' }} 
          stroke="#d1d5db"
        />
        <YAxis 
          allowDecimals={false} 
          tick={{ fontSize: 12, fill: '#6b7280' }} 
          stroke="#d1d5db"
        />
        <Tooltip
          cursor={{ fill: 'rgba(209, 213, 219, 0.3)' }} // Light gray hover effect
          contentStyle={{ backgroundColor: 'white', borderRadius: '0.375rem', borderColor: '#e5e7eb' }}
          labelStyle={{ color: '#1f2937', fontWeight: '500' }}
        />
        <Legend wrapperStyle={{ fontSize: '14px', paddingTop: '10px' }} />
        <Bar dataKey="count" name="Assets" radius={[4, 4, 0, 0]}> // Rounded top corners
          {chartData.map((entry, index) => (
            <Cell key={`cell-${index}`} fill={entry.fill} />
          ))}
        </Bar>
      </BarChart>
    </ResponsiveContainer>
  );
};

export default AssetStatusDistributionChart;


=== Folder: /c/Users/hp/desktop/clerk-webhooks/components/dashboard ===
--- File: AssetStatusPieChart.tsx ---
"use client";

import { PieChart, Pie, Cell, Tooltip, Legend, ResponsiveContainer } from 'recharts';

interface AssetStatusDataPoint {
  name: string; // e.g., "Active", "Inactive"
  value: number; // Count of assets in this status
}

interface AssetStatusPieChartProps {
  data: AssetStatusDataPoint[];
}

const COLORS = ['#34bc68', '#efc22f', '#00C49F', '#FFBB28', '#FF00FF']; // Updated first two colors

export default function AssetStatusPieChart({ data }: AssetStatusPieChartProps) {
  if (!data || data.length === 0) {
    return <div className="text-center py-4 text-gray-500 dark:text-gray-400">No status data available.</div>;
  }

  return (
    <div className="bg-white dark:bg-slate-800 rounded-lg p-6 h-96">
      <ResponsiveContainer width="100%" height="85%">
        <PieChart>
          <Pie
            data={data}
            cx="50%"
            cy="50%"
            labelLine={false}
            // label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
            outerRadius={100}
            innerRadius={70}
            fill="#8884d8"
            dataKey="value"
          >
            {data.map((entry, index) => (
              <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
            ))}
          </Pie>
          <Tooltip />
          <Legend />
        </PieChart>
      </ResponsiveContainer>
    </div>
  );
}


=== Folder: /c/Users/hp/desktop/clerk-webhooks/components/dashboard ===
--- File: AssetTeamDistributionChart.tsx ---
"use client";

import React from 'react';
import { PieChart, Pie, Cell, Tooltip, Legend, ResponsiveContainer } from 'recharts';

interface TeamDataPoint {
  name: string; // Team name
  value: number; // Number of assets
}

interface AssetTeamDistributionChartProps {
  data: TeamDataPoint[];
}

// Define a color palette for the pie chart segments
const COLORS = [
  '#0088FE', // Blue
  '#00C49F', // Green
  '#FFBB28', // Yellow
  '#FF8042', // Orange
  '#AF19FF', // Purple
  '#FF4560', // Red
  '#775DD0', // Indigo
  '#546E7A', // Slate
];

const AssetTeamDistributionChart: React.FC<AssetTeamDistributionChartProps> = ({ data }) => {
  if (!data || data.length === 0) {
    return <p className="text-center text-gray-500 py-8">No team assignment data to display.</p>;
  }

  return (
    <ResponsiveContainer width="100%" height={300}>
      <PieChart>
        <Pie
          data={data}
          cx="50%"
          cy="50%"
          labelLine={false}
          outerRadius={80}
          fill="#8884d8"
          dataKey="value"
          nameKey="name"
          label={({ name, percent }) => `${name} (${(percent * 100).toFixed(0)}%)`}
        >
          {data.map((entry, index) => (
            <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
          ))}
        </Pie>
        <Tooltip
          contentStyle={{ backgroundColor: 'white', borderRadius: '0.375rem', borderColor: '#e5e7eb' }}
          labelStyle={{ color: '#1f2937', fontWeight: '500' }}
        />
        <Legend wrapperStyle={{ fontSize: '14px', paddingTop: '10px' }} />
      </PieChart>
    </ResponsiveContainer>
  );
};

export default AssetTeamDistributionChart;


=== Folder: /c/Users/hp/desktop/clerk-webhooks/components/dashboard ===
--- File: KPICard.tsx ---
"use client";

import { LucideIcon } from 'lucide-react';
import { cn } from '@/lib/utils'; // Assuming you have a utility for class names

interface KPICardProps {
  title: string;
  value: string | number;
  icon: LucideIcon;
  trendValue?: string;
  trendDirection?: 'up' | 'down' | 'neutral';
  trendPeriod?: string;
  className?: string;
}

const KPICard: React.FC<KPICardProps> = ({
  title,
  value,
  icon: Icon,
  trendValue,
  trendDirection = 'neutral',
  trendPeriod,
  className,
}) => {
  const trendColor = {
    up: 'text-green-500',
    down: 'text-red-500',
    neutral: 'text-gray-500',
  };

  return (
    <div
      className={cn(
        'bg-gray-800/50 backdrop-blur-md shadow-xl rounded-xl p-6 border border-gray-700 hover:border-purple-500 transition-all duration-300 transform hover:scale-105',
        className
      )}
    >
      <div className="flex items-center justify-between mb-3">
        <p className="text-sm font-medium text-gray-400">{title}</p>
        <Icon className="h-6 w-6 text-purple-400" />
      </div>
      <div>
        <h3 className="text-3xl font-bold text-white mb-1">{value}</h3>
        {trendValue && trendPeriod && (
          <div className="flex items-center text-xs">
            <span className={cn('font-semibold', trendColor[trendDirection])}>
              {trendDirection === 'up' ? '▲' : trendDirection === 'down' ? '▼' : ''} {trendValue}
            </span>
            <span className="ml-1 text-gray-500">{trendPeriod}</span>
          </div>
        )}
      </div>
    </div>
  );
};

export default KPICard;


=== Folder: /c/Users/hp/desktop/clerk-webhooks/components ===
--- File: footer.tsx ---
export default function Footer() {
  return (
    <footer className='py-4'>
      <div className='container'>
        <p className='text-center text-sm text-gray-500'>
          &copy; {new Date().getFullYear()} ExpenseScout. All rights reserved.
        </p>
      </div>
    </footer>
  )
}


=== Folder: /c/Users/hp/desktop/clerk-webhooks/components ===
--- File: header.tsx ---
import Link from 'next/link'
import { SignInButton, SignedIn, SignedOut, UserButton } from '@clerk/nextjs'

import { ThemeToggle } from '@/components/theme-toggle'
import { Button } from '@/components/ui/button'

export default function Header() {
  return (
    <header className='py-4'>
      <nav className='container flex items-center justify-between'>
        <ul className='flex gap-10 text-sm font-medium'>
          <li>
            <Link href='/'>Home</Link>
          </li>
          <li>
            <Link href='/protected/server'>Protected (server)</Link>
          </li>
          <li>
            <Link href='/protected/client'>Protected (client)</Link>
          </li>
          <li>
            <Link href='/api/me'>Who am I?</Link>
          </li>
        </ul>

        <div className='flex items-center justify-between gap-6'>
          <ThemeToggle />

          <SignedOut>
            <SignInButton mode='modal'>
              <Button size='sm'>Sign in</Button>
            </SignInButton>
          </SignedOut>
          <SignedIn>
            <UserButton />
          </SignedIn>
        </div>
      </nav>
    </header>
  )
}


=== Folder: /c/Users/hp/desktop/clerk-webhooks/components/landing ===
--- File: LandingFooter.tsx ---
import Link from 'next/link';
import { Leaf, Twitter, Github, Linkedin } from 'lucide-react'; // Placeholder icons

const LandingFooter = () => {
  return (
    <footer className="bg-gray-800 text-gray-300 py-12 px-6 md:px-10">
      <div className="container mx-auto grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-8">
        {/* Logo and Company Info */}
        <div className="mb-6 md:mb-0 lg:col-span-1">
          <Link href="/" className="flex items-center space-x-2 text-xl font-semibold text-white mb-3">
            <Leaf size={24} className="text-green-400" />
            <span>Asset Scout</span>
          </Link>
          <p className="text-sm text-gray-400">
            Empowering organizations to manage assets with clarity and efficiency.
          </p>
        </div>

        {/* Links Section 1 (e.g., Product) */}
        <div>
          <h5 className="font-semibold text-white mb-3">Product</h5>
          <ul className="space-y-2 text-sm">
            <li><Link href="#features" className="hover:text-green-400 transition-colors">Features</Link></li>
            <li><Link href="#use-cases" className="hover:text-green-400 transition-colors">Use Cases</Link></li>
            <li><Link href="/pricing" className="hover:text-green-400 transition-colors">Pricing</Link></li> {/* Assuming a pricing page */} 
            <li><Link href="/docs" className="hover:text-green-400 transition-colors">Documentation</Link></li> {/* Assuming docs */} 
          </ul>
        </div>

        {/* Links Section 2 (e.g., Company) */}
        <div>
          <h5 className="font-semibold text-white mb-3">Company</h5>
          <ul className="space-y-2 text-sm">
            <li><Link href="/about" className="hover:text-green-400 transition-colors">About Us</Link></li>
            <li><Link href="/contact" className="hover:text-green-400 transition-colors">Contact</Link></li>
            <li><Link href="/careers" className="hover:text-green-400 transition-colors">Careers</Link></li>
          </ul>
        </div>

        {/* Social Media */}
        <div>
          <h5 className="font-semibold text-white mb-3">Social Networks</h5>
          <div className="flex space-x-4">
            <Link href="#" target="_blank" rel="noopener noreferrer" className="text-gray-400 hover:text-green-400 transition-colors">
              <Twitter size={20} />
            </Link>
            <Link href="#" target="_blank" rel="noopener noreferrer" className="text-gray-400 hover:text-green-400 transition-colors">
              <Github size={20} />
            </Link>
            <Link href="#" target="_blank" rel="noopener noreferrer" className="text-gray-400 hover:text-green-400 transition-colors">
              <Linkedin size={20} />
            </Link>
          </div>
        </div>
      </div>
      <div className="mt-10 pt-8 border-t border-gray-700 text-center text-sm text-gray-500">
        <p>&copy; {new Date().getFullYear()} Asset Scout. All rights reserved.</p>
        <p className="mt-1">
          <Link href="/privacy-policy" className="hover:text-green-400 transition-colors">Privacy Policy</Link> &middot; 
          <Link href="/terms-of-service" className="hover:text-green-400 transition-colors">Terms of Service</Link>
        </p>
      </div>
    </footer>
  );
};

export default LandingFooter;


=== Folder: /c/Users/hp/desktop/clerk-webhooks/components/landing ===
--- File: LandingHeader.tsx ---
import Link from 'next/link';
import { Button } from '@/components/ui/button'; // Assuming you have a Button component from shadcn/ui
import { Leaf } from 'lucide-react'; // Using Leaf as a placeholder logo icon

const LandingHeader = () => {
  return (
    <header className="py-4 px-6 md:px-10 bg-white sticky top-0 z-50 shadow-sm">
      <div className="container mx-auto flex justify-between items-center">
        {/* Logo */}
        <Link href="/" className="flex items-center space-x-2 text-2xl font-bold text-green-600">
          <Leaf size={28} />
          <span>Asset Scout</span>
        </Link>

        {/* Navigation Links */}
        <nav className="hidden md:flex space-x-6 items-center">
          <Link href="#features" className="text-gray-600 hover:text-green-600 transition-colors">
            Features
          </Link>
          <Link href="#use-cases" className="text-gray-600 hover:text-green-600 transition-colors">
            Use Cases
          </Link>
          <Link href="#testimonials" className="text-gray-600 hover:text-green-600 transition-colors">
            Testimonials
          </Link>
        </nav>

        {/* Action Button */}
        <div>
          <Button asChild className="bg-green-500 hover:bg-green-600 text-white">
            <Link href="/dashboard">Get Started</Link>
          </Button>
        </div>
      </div>
    </header>
  );
};

export default LandingHeader;


=== Folder: /c/Users/hp/desktop/clerk-webhooks/components/notifications ===
--- File: NotificationBell.tsx ---
// components/notifications/NotificationBell.tsx
'use client';

import React from 'react';
import Link from 'next/link';
import { Bell } from 'lucide-react'; // Assuming you use lucide-react for icons
import { useNotifications } from '@/lib/hooks/useNotifications'; // Adjust path if needed

export default function NotificationBell() {
  const { notifications, isLoading, isError } = useNotifications();

  const unreadCount = React.useMemo(() => {
    if (isLoading || isError || !notifications) return 0;
    return notifications.filter(n => !n.read).length;
  }, [notifications, isLoading, isError]);

  // Optional: Handle loading and error states more explicitly if desired
  // if (isLoading) return <div className="p-2"><Bell className="h-6 w-6 text-gray-400 animate-pulse" /></div>;
  // if (isError) return <div className="p-2"><Bell className="h-6 w-6 text-red-500" title="Error loading notifications"/></div>;

  return (
    <Link href="/notifications" className="relative flex items-center p-2 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500" aria-label="View notifications">
      <Bell className="h-6 w-6 text-gray-600 dark:text-gray-300" />
      {unreadCount > 0 && (
        <span className="absolute top-0 right-0 block h-5 w-5 transform -translate-y-1/3 translate-x-1/3 rounded-full bg-red-500 text-white text-xs flex items-center justify-center ring-2 ring-white dark:ring-gray-800">
          {unreadCount > 9 ? '9+' : unreadCount}
        </span>
      )}
    </Link>
  );
}


=== Folder: /c/Users/hp/desktop/clerk-webhooks/components/notifications ===
--- File: NotificationItem.tsx ---
// components/notifications/NotificationItem.tsx
'use client';

import React from 'react';
import Link from 'next/link';
import { Notification, useNotifications } from '@/lib/hooks/useNotifications';
import { formatDistanceToNow } from 'date-fns';
import { Button } from '@/components/ui/button';
import { CheckCircle, Circle, ExternalLink, Package, AlertTriangle, Loader2 } from 'lucide-react';

interface NotificationItemProps {
  notification: Notification;
}

export default function NotificationItem({ notification }: NotificationItemProps) {
  const { markAsRead } = useNotifications();
  const [isUpdating, setIsUpdating] = React.useState(false);
  const [updateError, setUpdateError] = React.useState<string | null>(null);

  const handleToggleReadStatus = async () => {
    setIsUpdating(true);
    setUpdateError(null);
    try {
      await markAsRead([notification.id], !notification.read);
    } catch (error) {
      console.error("Failed to update notification status:", error);
      setUpdateError(error instanceof Error ? error.message : 'Failed to update status');
    } finally {
      setIsUpdating(false);
    }
  };

  const timeAgo = formatDistanceToNow(new Date(notification.createdAt), { addSuffix: true });

  const IconComponent = notification.type === 'asset_assignment' ? Package : CheckCircle;

  return (
    <div 
      className={`p-4 border rounded-lg flex items-start space-x-3 transition-all duration-150 ease-in-out 
        ${notification.read 
          ? 'bg-gray-50 dark:bg-gray-800 border-gray-200 dark:border-gray-700 hover:bg-gray-100 dark:hover:bg-gray-700/60'
          : 'bg-white dark:bg-gray-800/50 border-primary/30 dark:border-primary/40 shadow-sm hover:shadow-md'}`}
    >
      <div className="flex-shrink-0 pt-1">
        <IconComponent 
          className={`h-5 w-5 
            ${notification.read 
              ? 'text-gray-400 dark:text-gray-500' 
              : 'text-primary'}`}
        />
      </div>
      <div className="flex-grow min-w-0">
        <p className={`text-sm break-words 
          ${notification.read 
            ? 'text-gray-600 dark:text-gray-400' 
            : 'text-gray-800 dark:text-gray-100 font-medium'}`}
        >
          {notification.message}
        </p>
        <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">{timeAgo}</p>
        {notification.type === 'asset_assignment' && notification.asset && (
          <Link 
            href={`/assets/${notification.asset.id}`} 
            className="mt-2 inline-flex items-center text-xs text-primary hover:underline dark:text-primary-light focus:outline-none focus:ring-1 focus:ring-primary rounded"
          >
            View Asset <ExternalLink className="ml-1 h-3 w-3" />
          </Link>
        )}
        {updateError && (
          <p className="mt-1 text-xs text-red-500 flex items-center">
            <AlertTriangle className="mr-1 h-3 w-3" /> {updateError}
          </p>
        )}
      </div>
      <div className="flex-shrink-0 ml-2">
        <Button
          variant="ghost"
          size="icon"
          onClick={handleToggleReadStatus}
          aria-label={notification.read ? "Mark as unread" : "Mark as read"}
          title={notification.read ? "Mark as unread" : "Mark as read"}
          className={`p-1 h-8 w-8 rounded-full 
            ${notification.read 
              ? 'text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 focus:bg-gray-200 dark:focus:bg-gray-700'
              : 'text-primary hover:text-primary-dark dark:hover:text-primary-light focus:bg-primary/10 dark:focus:bg-primary/20'}`}
          disabled={isUpdating}
        >
          {isUpdating ? (
            <Loader2 className="h-4 w-4 animate-spin" />
          ) : notification.read ? (
            <Circle className="h-5 w-5" />
          ) : (
            <CheckCircle className="h-5 w-5" />
          )}
        </Button>
      </div>
    </div>
  );
}


=== Folder: /c/Users/hp/desktop/clerk-webhooks/components ===
--- File: PageHeader.tsx ---
"use client";

interface PageHeaderProps {
  title: string;
  description?: string;
}

export function PageHeader({ title, description }: PageHeaderProps) {
  return (
    <div className="mb-8">
      <h1 className="text-3xl md:text-4xl font-bold text-gray-800 dark:text-white">
        {title}
      </h1>
      {description && (
        <p className="mt-2 text-lg text-gray-600 dark:text-gray-300">
          {description}
        </p>
      )}
    </div>
  );
}


=== Folder: /c/Users/hp/desktop/clerk-webhooks/components/settings ===
--- File: ThemeToggle.tsx ---
"use client";

import * as React from "react";
import { useTheme } from "next-themes";
import { Button } from "@/components/ui/button";
import { Moon, Sun, Laptop } from "lucide-react"; // Icons for themes

export function ThemeToggle() {
  const { theme, setTheme } = useTheme();

  return (
    <div className="flex space-x-2">
      <Button
        variant={theme === "light" ? "default" : "outline"}
        size="sm"
        onClick={() => setTheme("light")}
        className={`flex items-center justify-center w-full md:w-auto ${theme === 'light' ? 'bg-primary text-primary-foreground' : ''}`}
      >
        <Sun className="mr-2 h-4 w-4" /> Light
      </Button>
      <Button
        variant={theme === "dark" ? "default" : "outline"}
        size="sm"
        onClick={() => setTheme("dark")}
        className={`flex items-center justify-center w-full md:w-auto ${theme === 'dark' ? 'bg-primary text-primary-foreground' : ''}`}
      >
        <Moon className="mr-2 h-4 w-4" /> Dark
      </Button>
      <Button
        variant={theme === "system" ? "default" : "outline"}
        size="sm"
        onClick={() => setTheme("system")}
        className={`flex items-center justify-center w-full md:w-auto ${theme === 'system' ? 'bg-primary text-primary-foreground' : ''}`}
      >
        <Laptop className="mr-2 h-4 w-4" /> System
      </Button>
    </div>
  );
}


=== Folder: /c/Users/hp/desktop/clerk-webhooks/components ===
--- File: theme-provider.tsx ---
'use client'

import * as React from 'react'
import { ThemeProvider as NextThemesProvider } from 'next-themes'
import { type ThemeProviderProps } from 'next-themes/dist/types'

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}


=== Folder: /c/Users/hp/desktop/clerk-webhooks/components ===
--- File: theme-toggle.tsx ---
'use client'

import { Moon, Sun } from 'lucide-react'
import { useTheme } from 'next-themes'

import { Button } from '@/components/ui/button'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger
} from '@/components/ui/dropdown-menu'

import useMounted from '@/hooks/use-mounted'

export function ThemeToggle() {
  const { setTheme, resolvedTheme } = useTheme()

  const mounted = useMounted()
  if (!mounted) return null

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant='ghost' size='icon'>
          {resolvedTheme === 'dark' ? (
            <Sun className='h-5 w-5 text-orange-300' />
          ) : (
            <Moon className='h-5 w-5' />
          )}

          <span className='sr-only'>Toggle theme</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align='end'>
        <DropdownMenuItem onClick={() => setTheme('light')}>
          Light
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme('dark')}>
          Dark
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme('system')}>
          System
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}


=== Folder: /c/Users/hp/desktop/clerk-webhooks/components ===
--- File: ThemeProvider.tsx ---
"use client";

import * as React from "react";
import { ThemeProvider as NextThemesProvider } from "next-themes";
import type { ThemeProviderProps } from "next-themes/dist/types";

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>;
}


=== Folder: /c/Users/hp/desktop/clerk-webhooks/components/tracker ===
--- File: AddAssetModal.tsx ---
// components/tracker/AddAssetModal.tsx
"use client";
import React, { useState, useRef, ChangeEvent, DragEvent, useEffect } from "react";
import { Briefcase, Search, X, Check, ChevronDown, ImageIcon, MapPin, UserPlus } from "lucide-react";
import Image from "next/image";
import userImgPlaceholder from "../../public/next.svg"; // Corrected path to access from public directory
import { useOrganization, useOrganizationList, useUser } from "@clerk/nextjs";

// Define a simple type for organization members fetched from Clerk
interface OrgMember {
  id: string; // This will be clerkUserId
  identifier: string; // email or username
  firstName?: string | null;
  lastName?: string | null;
  imageUrl?: string;
  role: string;
}

interface AddAssetModalProps {
  onClose: () => void;
  onAssetAdded: () => void; // Callback to refresh asset list
}

const AddAssetModal: React.FC<AddAssetModalProps> = ({ onClose, onAssetAdded }) => {
  const { organization } = useOrganization(); // For current org ID
  const { user } = useUser(); // For current user, if needed

  const [step, setStep] = useState(1);
  const [title, setTitle] = useState("");
  const [model, setModel] = useState("");
  const [serialNumber, setSerialNumber] = useState("");
  const [assetImageFile, setAssetImageFile] = useState<File | null>(null);
  const [assetImagePreview, setAssetImagePreview] = useState<string | null>(null);
  const [description, setDescription] = useState("");
  const [latitude, setLatitude] = useState("");
  const [longitude, setLongitude] = useState("");
  const [status, setStatus] = useState("Active"); // Default status

  const [assigneeDropdownOpen, setAssigneeDropdownOpen] = useState(false);
  const [selectedAssigneeClerkId, setSelectedAssigneeClerkId] = useState<string | null>(null);
  const [orgMembers, setOrgMembers] = useState<OrgMember[]>([]);
  const [memberSearchQuery, setMemberSearchQuery] = useState("");

  const [errors, setErrors] = useState<{ [key: string]: string | boolean }>({});
  const [isLoading, setIsLoading] = useState(false);
  const [formError, setFormError] = useState<string | null>(null);

  const fileInputRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    const fetchOrgMembers = async () => {
      if (organization) {
        try {
          const memberships = await organization.getMemberships();
          const members = memberships.data.map(mem => ({
            id: mem.publicUserData.userId!, // Clerk User ID
            identifier: mem.publicUserData.identifier,
            firstName: mem.publicUserData.firstName,
            lastName: mem.publicUserData.lastName,
            imageUrl: mem.publicUserData.imageUrl,
            role: mem.role,
          }));
          setOrgMembers(members);
        } catch (error) {
          console.error("Failed to fetch organization members:", error);
        }
      }
    };
    fetchOrgMembers();
  }, [organization]);

  const validateStep1 = () => {
    const newErrors: { [key: string]: string } = {};
    if (!title.trim()) newErrors.title = "Title is required.";
    if (!model.trim()) newErrors.model = "Model is required.";
    if (!serialNumber.trim()) newErrors.serialNumber = "Serial number is required.";
    if (!assetImageFile) newErrors.profileImage = "Asset image is required."; // Changed to profileImage for consistency with previous error key
    if (!description.trim()) newErrors.description = "Description is required.";
    if (latitude && isNaN(parseFloat(latitude))) newErrors.latitude = "Invalid latitude.";
    if (longitude && isNaN(parseFloat(longitude))) newErrors.longitude = "Invalid longitude.";

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleContinue = () => {
    if (validateStep1()) {
      setStep(2); // Assuming step 2 is for assignment or confirmation
                   // For this structure, we might combine it if assignment is optional on create
    }
  };
  
  const handleFormSubmit = async () => {
    if (!validateStep1()) return; // Re-validate before submission

    if (!organization) {
        setFormError("No active organization selected.");
        return;
    }
    setIsLoading(true);
    setFormError(null);

    let imageBase64: string | undefined = undefined;
    if (assetImageFile) {
      try {
        imageBase64 = await new Promise((resolve, reject) => {
          const reader = new FileReader();
          reader.readAsDataURL(assetImageFile);
          reader.onload = () => resolve(reader.result as string);
          reader.onerror = (error) => reject(error);
        });
      } catch (error) {
        console.error("Error converting image to base64:", error);
        setFormError("Failed to process image. Please try again.");
        setIsLoading(false);
        return;
      }
    }

    const assetData = {
      title,
      model,
      serialNumber,
      description,
      status,
      latitude: latitude ? parseFloat(latitude) : undefined,
      longitude: longitude ? parseFloat(longitude) : undefined,
      imageBase64, // Include the base64 string here
      assignedToClerkUserId: selectedAssigneeClerkId,
      clerkOrganizationId: organization.id, // This comes from useOrganization()
    };

    try {
      const response = await fetch('/api/assets', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(assetData),
        credentials: 'include', // Add this to include auth cookies
      });

      if (!response.ok) {
        const errorText = `Failed to create asset (${response.status})`;
        console.error(errorText);
        throw new Error(errorText);
      }
      onAssetAdded(); // Callback to refresh parent component's asset list
      onClose(); // Close modal on success
    } catch (error: any) {
      setFormError(error.message || "An unexpected error occurred.");
      console.error("Asset creation error:", error);
    } finally {
      setIsLoading(false);
    }
  };


  const handleImageUpload = (e: ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      setAssetImageFile(file);
      setAssetImagePreview(URL.createObjectURL(file));
      setErrors(prev => ({...prev, profileImage: false}));
    }
  };

  const handleImageDrop = (e: DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    const file = e.dataTransfer.files?.[0];
    if (file && file.type.startsWith("image/")) {
      setAssetImageFile(file);
      setAssetImagePreview(URL.createObjectURL(file));
      setErrors(prev => ({...prev, profileImage: false}));
    }
  };
  
  const filteredMembers = orgMembers.filter(member =>
    `${member.firstName || ''} ${member.lastName || ''} ${member.identifier}`.toLowerCase().includes(memberSearchQuery.toLowerCase())
  );

  const selectedAssigneeDetails = selectedAssigneeClerkId
    ? orgMembers.find(m => m.id === selectedAssigneeClerkId)
    : null;


  // In a real app, step 2 would be distinct or part of a different flow (e.g., "Assign Asset" button on table row)
  // For this modal, we'll assume assignment is done in Step 1 or directly on submit.
  // The original two-step process was more for a different kind of invitation flow.
  // We simplify by putting assignment directly in the asset creation form.

  return (
    <div className="fixed inset-0 bg-black/30 backdrop-blur-sm z-50 flex items-center justify-center px-4">
      <div className="bg-white w-[600px] max-w-[95%] rounded-xl p-6 shadow-xl relative max-h-[90vh] overflow-y-auto">
        <button
          onClick={onClose}
          className="absolute top-4 right-4 text-gray-500 hover:text-black disabled:opacity-50"
          disabled={isLoading}
        >
          <X size={18} />
        </button>

        {/* Simplified to one step for asset creation */}
        <>
          <div className="flex justify-center mb-4">
            <div className="bg-[#e4f7ec] p-3 rounded-full">
              <Briefcase size={22} className="text-[#34BC68]" />
            </div>
          </div>

          <h2 className="text-lg font-semibold text-center mb-1">Record New Asset</h2>
          <p className="text-sm text-gray-600 text-center mb-6">
            Fill in the details for the new asset.
          </p>

          {formError && <p className="text-sm text-red-500 text-center mb-3">{formError}</p>}

          <div className="space-y-3">
            <div>
              <label className="text-sm text-black font-medium">Title <span className="text-red-500">*</span></label>
              <input value={title} onChange={(e) => { setTitle(e.target.value); setErrors(prev => ({ ...prev, title: false })); }} placeholder="e.g., Laptop, Office Desk"
                className={`w-full border ${errors.title ? "border-red-400" : "border-gray-300"} rounded-md py-2 px-3 text-sm outline-none`} />
              {errors.title && typeof errors.title === 'string' && <p className="text-xs text-red-500 mt-1">{errors.title}</p>}
            </div>

            <div className="flex space-x-4">
              <div className="w-1/2">
                <label className="text-sm font-medium text-black">Model <span className="text-red-500">*</span></label>
                <input value={model} onChange={(e) => { setModel(e.target.value); setErrors(prev => ({ ...prev, model: false })); }} placeholder="e.g., MacBook Pro 16 M3"
                  className={`w-full border ${errors.model ? "border-red-400" : "border-gray-300"} rounded-md py-2 px-3 text-sm outline-none`} />
                 {errors.model && typeof errors.model === 'string' && <p className="text-xs text-red-500 mt-1">{errors.model}</p>}
              </div>
              <div className="w-1/2">
                <label className="text-sm font-medium text-black">Serial Number <span className="text-red-500">*</span></label>
                <input value={serialNumber} onChange={(e) => { setSerialNumber(e.target.value); setErrors(prev => ({ ...prev, serialNumber: false })); }} placeholder="e.g., C02XXXXXXG8WP"
                  className={`w-full border ${errors.serialNumber ? "border-red-400" : "border-gray-300"} rounded-md py-2 px-3 text-sm outline-none`} />
                {errors.serialNumber && typeof errors.serialNumber === 'string' && <p className="text-xs text-red-500 mt-1">{errors.serialNumber}</p>}
              </div>
            </div>
            
            {/* Asset Image */}
            <div className="mb-4">
              <div className="flex flex-col sm:flex-row justify-between sm:items-start">
                <label className="text-sm font-medium text-black mb-2 sm:mb-0">Asset Image <span className="text-red-500">*</span></label>
                <div className="flex items-center space-x-3 sm:space-x-5 w-full sm:w-auto">
                  <div onClick={() => fileInputRef.current?.click()} className="w-12 h-12 flex-shrink-0 flex items-center justify-center bg-gray-100 rounded-full border border-gray-300 cursor-pointer">
                    {assetImagePreview ? (
                      <Image src={assetImagePreview} alt="Preview" width={48} height={48} className="rounded-full object-cover" />
                    ) : ( <ImageIcon size={20} className="text-gray-500" /> )}
                    <input type="file" ref={fileInputRef} className="hidden" accept="image/*" onChange={handleImageUpload} />
                  </div>
                  <div onClick={() => fileInputRef.current?.click()} onDragOver={(e) => e.preventDefault()} onDrop={handleImageDrop}
                    className={`flex-grow border border-dashed ${errors.profileImage ? "border-red-400" : "border-gray-300"} rounded-md p-2 cursor-pointer hover:border-[#6941C6] text-sm text-gray-500`}>
                    <p className="leading-snug text-center sm:text-left">
                      <span className="text-[#6941C6] font-medium">Click to upload</span> or drag and drop
                    </p>
                  </div>
                </div>
              </div>
              {errors.profileImage && typeof errors.profileImage === 'string' && (
                <p className="text-sm text-red-500 mt-1 text-right sm:text-left sm:ml-[calc(3rem+1.25rem)]">{errors.profileImage}</p>
              )}
            </div>

            <div>
              <label className="text-sm font-medium text-black">Description <span className="text-red-500">*</span></label>
              <textarea value={description} onChange={(e) => { setDescription(e.target.value); setErrors(prev => ({ ...prev, description: false })); }} placeholder="Detailed description of the asset"
                className={`w-full border ${errors.description ? "border-red-400" : "border-gray-300"} rounded-md py-2 px-3 text-sm outline-none min-h-[80px]`} />
              {errors.description && typeof errors.description === 'string' && <p className="text-xs text-red-500 mt-1">{errors.description}</p>}
            </div>

            <div className="flex space-x-4">
              <div className="w-1/2">
                <label className="text-sm font-medium text-black flex items-center">
                  <MapPin size={14} className="mr-1 text-gray-500" /> Latitude
                </label>
                <input type="number" value={latitude} onChange={(e) => setLatitude(e.target.value)} placeholder="e.g., 34.0522"
                  className={`w-full border ${errors.latitude ? "border-red-400" : "border-gray-300"} rounded-md py-2 px-3 text-sm outline-none`} />
                {errors.latitude && typeof errors.latitude === 'string' && <p className="text-xs text-red-500 mt-1">{errors.latitude}</p>}
              </div>
              <div className="w-1/2">
                <label className="text-sm font-medium text-black flex items-center">
                  <MapPin size={14} className="mr-1 text-gray-500" /> Longitude
                </label>
                <input type="number" value={longitude} onChange={(e) => setLongitude(e.target.value)} placeholder="e.g., -118.2437"
                  className={`w-full border ${errors.longitude ? "border-red-400" : "border-gray-300"} rounded-md py-2 px-3 text-sm outline-none`} />
                {errors.longitude && typeof errors.longitude === 'string' && <p className="text-xs text-red-500 mt-1">{errors.longitude}</p>}
              </div>
            </div>
            
            <div>
                <label className="text-sm font-medium text-black">Status</label>
                <select value={status} onChange={(e) => setStatus(e.target.value)}
                    className="w-full border border-gray-300 rounded-md py-2 px-3 text-sm outline-none">
                    <option value="Active">Active</option>
                    <option value="Inactive">Inactive</option>
                </select>
            </div>

            {/* Assign User */}
            <div className="relative">
              <label className="text-sm text-black font-medium flex items-center">
                <UserPlus size={14} className="mr-1 text-gray-500" /> Assign to Member (Optional)
              </label>
              <div
                className={`w-full border border-gray-300 rounded-md py-2 px-3 text-sm flex justify-between items-center cursor-pointer`}
                onClick={() => setAssigneeDropdownOpen(!assigneeDropdownOpen)}
              >
                <span>
                  {selectedAssigneeDetails ? `${selectedAssigneeDetails.firstName || ''} ${selectedAssigneeDetails.lastName || ''} (${selectedAssigneeDetails.identifier})` : "Select member"}
                </span>
                <ChevronDown size={16} className="text-gray-500" />
              </div>

              {assigneeDropdownOpen && (
                <div className="absolute z-10 mt-1 w-full bg-white border border-gray-200 rounded-md shadow-lg max-h-60 overflow-auto">
                  <input
                    type="text"
                    placeholder="Search members..."
                    value={memberSearchQuery}
                    onChange={(e) => setMemberSearchQuery(e.target.value)}
                    className="w-full px-3 py-2 border-b border-gray-200 text-sm outline-none"
                  />
                  {filteredMembers.map((member) => (
                    <div
                      key={member.id}
                      className="flex items-center space-x-3 px-3 py-2 hover:bg-gray-100 cursor-pointer"
                      onClick={() => {
                        setSelectedAssigneeClerkId(member.id);
                        setAssigneeDropdownOpen(false);
                        setMemberSearchQuery("");
                      }}
                    >
                      <Image
                        src={member.imageUrl || userImgPlaceholder}
                        alt={member.identifier}
                        width={24}
                        height={24}
                        className="w-6 h-6 rounded-full object-cover"
                      />
                      <span className="text-sm">{member.firstName || ''} {member.lastName || ''} ({member.identifier}) - {member.role}</span>
                    </div>
                  ))}
                  {filteredMembers.length === 0 && <p className="text-sm text-gray-500 p-3">No members found.</p>}
                </div>
              )}
            </div>
          </div>


          <div className="flex flex-col sm:flex-row justify-end space-y-2 sm:space-y-0 sm:space-x-3 mt-8">
            <button onClick={onClose} disabled={isLoading}
              className="px-6 py-2 text-sm border border-gray-300 rounded-md bg-white text-black hover:bg-gray-50 disabled:opacity-50 w-full sm:w-auto">
              Cancel
            </button>
            <button onClick={handleFormSubmit} disabled={isLoading || !organization}
              className="px-6 py-2 text-sm rounded-md bg-black text-white hover:bg-gray-800 disabled:opacity-50 disabled:bg-gray-400 w-full sm:w-auto">
              {isLoading ? "Saving..." : "Save Asset"}
            </button>
          </div>
        </>
      </div>
    </div>
  );
};

export default AddAssetModal;

=== Folder: /c/Users/hp/desktop/clerk-webhooks/components/tracker ===
--- File: AddEmployeeModal.tsx ---
"use client";
import React, { useState, ChangeEvent } from "react";
import { X, Plus } from "lucide-react";
import Image from "next/image";

interface Member {
  email: string;
  role: string;
  valid: boolean;
}

interface AddEmployeeModalProps {
  onClose: () => void;
}

const AddEmployeeModal: React.FC<AddEmployeeModalProps> = ({ onClose }) => {
  const [members, setMembers] = useState<Member[]>([
    { email: "", role: "", valid: true },
    { email: "", role: "", valid: true },
  ]);

  const handleAddRow = () => {
    if (members.length < 5) {
      setMembers([...members, { email: "", role: "", valid: true }]);
    }
  };

  const validateEmail = (email: string) => {
    // Basic validation, can be improved
    return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email) && email.endsWith("@gmail.com");
  };

  const handleChange = (index: number, field: keyof Omit<Member, 'valid'>, value: string) => {
    const updated = [...members];
    updated[index][field] = value;

    if (field === "email") {
      updated[index].valid = validateEmail(value) || value === ""; // Valid if empty initially
    }

    setMembers(updated);
  };

  const isFormValid = members.every(
    (member) =>
      member.email.trim() &&
      member.role.trim() &&
      validateEmail(member.email)
  );

  return (
    <div className="fixed inset-0 bg-black/30 backdrop-blur-sm z-50 flex items-center justify-center px-4">
      <div className="bg-white w-[540px] max-w-[95%] rounded-xl p-6 shadow-xl relative">
        <button
          onClick={onClose}
          className="absolute top-4 right-4 text-gray-500 hover:text-black"
        >
          <X size={18} />
        </button>

        <div className="flex justify-center mb-4">
          <div className="flex -space-x-4">
            {[1, 2, 3].map((i) => (
              <Image
                key={i}
                src="/assets/kob.jpg"
                alt="User"
                width={32}
                height={32}
                className="w-8 h-8 rounded-full border-2 border-white"
              />
            ))}
          </div>
        </div>

        <h2 className="text-center text-lg font-semibold text-black">
          Invite your team
        </h2>
        <p className="text-sm text-gray-600 text-center mt-1 mb-6">
          Add new users to invite to the team and notify them with email also add their roles.
        </p>

        <div className="space-y-4">
          {members.map((member, index) => (
            <div key={index} className="flex flex-col sm:flex-row sm:space-x-4 space-y-4 sm:space-y-0">
              <div className="flex-1">
                <label className="block text-sm font-medium text-black mb-1">
                  Email<span className="text-red-500">*</span>
                </label>
                <input
                  type="email"
                  placeholder="example@gmail.com"
                  value={member.email}
                  onChange={(e: ChangeEvent<HTMLInputElement>) => handleChange(index, "email", e.target.value)}
                  className={`w-full border rounded-md px-3 py-2 text-sm outline-none ${
                    member.email && !member.valid
                      ? "border-red-500 focus:border-red-500"
                      : "border-gray-300 focus:border-blue-500"
                  }`}
                />
                {member.email && !member.valid && (
                  <p className="text-xs text-red-500 mt-1">
                    Must be a valid @gmail.com email.
                  </p>
                )}
              </div>
              <div className="flex-1">
                <label className="block text-sm font-medium text-black mb-1">
                  Role<span className="text-red-500">*</span>
                </label>
                <select
                  value={member.role}
                  onChange={(e: ChangeEvent<HTMLSelectElement>) => handleChange(index, "role", e.target.value)}
                  className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm outline-none focus:border-blue-500"
                >
                  <option value="">Select role</option>
                  <option value="Admin">Admin</option>
                  <option value="Manager">Manager</option>
                  <option value="Team Member">Team Member</option>
                  <option value="Viewer">Viewer</option>
                </select>
              </div>
            </div>
          ))}
        </div>

        {members.length < 5 && (
          <div
            className="mt-4 flex items-center space-x-2 text-sm text-[#34BC68] cursor-pointer font-medium"
            onClick={handleAddRow}
          >
            <div className="w-5 h-5 flex items-center justify-center rounded-full bg-[#e4f7ec]">
              <Plus size={14} className="text-[#34BC68]" />
            </div>
            <span>Add another</span>
          </div>
        )}

        <div className="flex flex-col sm:flex-row justify-center sm:space-x-4 mt-8 space-y-2 sm:space-y-0">
          <button
            onClick={onClose}
            className="px-4 sm:px-24 py-2 border border-gray-300 rounded-md text-sm text-black w-full sm:w-auto"
          >
            Cancel
          </button>
          <button
            disabled={!isFormValid}
            onClick={onClose} // Assuming this will handle form submission or just close
            className={`px-4 sm:px-24 py-2 rounded-md text-sm w-full sm:w-auto ${
              isFormValid
                ? "bg-black text-white hover:bg-gray-800"
                : "bg-gray-300 text-gray-500 cursor-not-allowed"
            }`}
          >
            Confirm
          </button>
        </div>
      </div>
    </div>
  );
};

export default AddEmployeeModal;

=== Folder: /c/Users/hp/desktop/clerk-webhooks/components/tracker ===
--- File: AssetPageHeader.tsx ---
"use client";
import React, { useState } from "react";
import { PlusCircle } from "lucide-react";
import AddAssetModal from "./AddAssetModal";

interface AssetPageHeaderProps {
  activeTab: string;
  setActiveTab: (tab: string) => void;
  onAssetAdded: () => void; // Callback after an asset is successfully added
}

const AssetPageHeader: React.FC<AssetPageHeaderProps> = ({ activeTab, setActiveTab, onAssetAdded }) => {
  const [isAddAssetOpen, setIsAddAssetOpen] = useState(false);
  const tabs = ["All Assets", "Not Active"]; // Example, can be dynamic

  // This component doesn't need its own refreshTrigger,
  // it calls onAssetAdded which is managed by the parent page (AssetsPage)

  return (
    <div className="w-full px-4 md:px-6 lg:px-10 relative">
      {isAddAssetOpen && <AddAssetModal 
        onClose={() => setIsAddAssetOpen(false)} 
        onAssetAdded={() => {
          onAssetAdded(); // Call parent's handler
          setIsAddAssetOpen(false); // Close modal after asset is added
        }} 
      />}

      <div className="flex flex-col md:flex-row items-start md:items-center justify-between pt-6 pb-4 space-y-3 md:space-y-0">
        <div className="flex items-center space-x-3 md:space-x-4">
          <h2 className="text-xl md:text-2xl font-semibold text-black dark:text-white">Assets</h2>
          {/* Dynamic count can be added here if available via props or state */}
          {/* <div className="bg-gray-100 dark:bg-gray-700 text-green-600 dark:text-green-400 text-xs md:text-sm px-2 py-1 rounded-md font-medium">
            {/* Count * /}
          </div> */}
        </div>

        <div className="flex flex-col sm:flex-row items-stretch sm:items-center space-y-2 sm:space-y-0 sm:space-x-3 w-full md:w-auto">
          <button
            onClick={() => setIsAddAssetOpen(true)}
            className="flex items-center justify-center px-4 py-2 bg-[#34BC68] text-white rounded-md text-sm font-medium hover:bg-green-700 w-full sm:w-auto"
          >
            <PlusCircle size={16} className="mr-2" />
            New Asset
          </button>
        </div>
      </div>

      <div className="flex space-x-4 md:space-x-6 pt-2 border-b border-gray-200 dark:border-gray-700">
        {tabs.map((tab) => (
          <button
            key={tab}
            onClick={() => setActiveTab(tab)}
            className={`text-sm font-medium pb-2.5 whitespace-nowrap ${
              activeTab === tab
                ? "text-[#34BC68] dark:text-green-400 border-b-2 border-[#34BC68] dark:border-green-400"
                : "text-gray-600 dark:text-gray-400 hover:text-black dark:hover:text-white"
            }`}
          >
            {tab}
          </button>
        ))}
      </div>
    </div>
  );
};

export default AssetPageHeader;

=== Folder: /c/Users/hp/desktop/clerk-webhooks/components/tracker ===
--- File: AssetTable.tsx ---
"use client";
import React, { useState, useEffect, useRef, useCallback } from "react";
import Link from 'next/link'; // Import Link
import { Filter, List, LayoutGrid, Search, MoreVertical, ArrowLeft, ArrowRight, ExternalLink, Edit2, Trash2, MapPin, Image as ImageIcon, Eye } from "lucide-react";
import { useOrganization, useAuth } from "@clerk/nextjs";
import Image from "next/image";
import EditAssetModal from './EditAssetModal'; // Import EditAssetModal

interface Asset {
  id: string;
  title: string;
  model: string;
  serialNumber: string;
  imageUrl?: string | null;
  description: string;
  status: string;
  latitude?: number | null;
  longitude?: number | null;
  clerkOrganizationId: string;
  assignedToClerkUserId?: string | null;
  createdAt: string;
  updatedAt: string;
  assignedTo?: {
    firstName?: string | null;
    lastName?: string | null;
    email?: string | null;
    imageUrl?: string | null;
    clerkUserId: string;
  } | null;
}

interface AssetTableProps {
  refreshTrigger: number; 
}

const AssetTable: React.FC<AssetTableProps> = ({ refreshTrigger }) => {
  const { organization, isLoaded: orgLoaded } = useOrganization();
  const { orgRole, isLoaded: authLoaded, userId: currentUserId } = useAuth();

  const [assets, setAssets] = useState<Asset[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 6;
  const [activeMenuAssetId, setActiveMenuAssetId] = useState<string | null>(null);
  const dropdownRef = useRef<HTMLDivElement>(null);
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedItems, setSelectedItems] = useState<string[]>([]);

  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [editingAsset, setEditingAsset] = useState<Asset | null>(null);

  const fetchAssets = useCallback(async () => {
    if (!orgLoaded || !authLoaded || !organization) {
      if (orgLoaded && authLoaded && !organization) {
         setIsLoading(false);
         setAssets([]);
      }
      return;
    }
    
    setIsLoading(true);
    setError(null);
    try {
      const response = await fetch(`/api/assets`, { credentials: 'include' });
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({ message: `Failed to fetch assets (${response.status} ${response.statusText})` }));
        throw new Error(errorData.message);
      }
      const data: Asset[] = await response.json();
      setAssets(data);
    } catch (err: any) {
      setError(err.message || "An unknown error occurred.");
      setAssets([]);
    } finally {
      setIsLoading(false);
    }
  }, [organization, orgLoaded, authLoaded, refreshTrigger]);

  useEffect(() => {
    fetchAssets();
  }, [fetchAssets]);


  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setActiveMenuAssetId(null);
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, []);

  const handleSelectItem = (id: string) => {
    setSelectedItems(prev => prev.includes(id) ? prev.filter(itemId => itemId !== id) : [...prev, id]);
  };

  const handleSelectAll = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.checked) {
      setSelectedItems(currentData.map(item => item.id));
    } else {
      setSelectedItems([]);
    }
  };
  
  const handleDeleteAsset = async (assetId: string) => {
    if (!confirm("Are you sure you want to delete this asset? This action cannot be undone.")) return;
    try {
        setActiveMenuAssetId(null);
        const response = await fetch(`/api/assets/${assetId}`, { method: 'DELETE', credentials: 'include' });
        if (!response.ok) {
            const errorData = await response.json().catch(() => ({ message: `Failed to delete asset (${response.status} ${response.statusText})` }));
            throw new Error(errorData.message);
        }
        fetchAssets(); // Refresh list
        alert("Asset deleted successfully.");
    } catch (err: any) {
        console.error("Delete error:", err);
        alert(`Error deleting asset: ${err.message}`);
    }
  };

  const handleOpenEditModal = (asset: Asset) => {
    setEditingAsset(asset);
    setIsEditModalOpen(true);
    setActiveMenuAssetId(null);
  };

  const filteredAssets = assets.filter((asset) =>
    `${asset.title} ${asset.model} ${asset.serialNumber} ${asset.status} ${asset.assignedTo?.firstName || ''} ${asset.assignedTo?.lastName || ''} ${asset.assignedTo?.email || ''}`
      .toLowerCase().includes(searchQuery.toLowerCase())
  );
  const totalPages = Math.ceil(filteredAssets.length / itemsPerPage);
  const currentData = filteredAssets.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage);

  const handlePageChange = (page: number) => {
    if (page >= 1 && page <= totalPages) {
      setCurrentPage(page);
      setActiveMenuAssetId(null);
    }
  };

  if (!orgLoaded || !authLoaded) {
    return <div className="text-center py-10 text-gray-500 dark:text-gray-400">Loading organization data...</div>;
  }
  if (!organization && orgLoaded) { // Added orgLoaded to prevent premature message
    return <div className="text-center py-10 bg-white dark:bg-gray-800 rounded-xl m-2 md:m-6 border border-dashed border-gray-300 dark:border-gray-700 text-gray-600 dark:text-gray-400">Please select or create an organization to view assets.</div>;
  }
  if (isLoading) return <div className="text-center py-10 text-gray-500 dark:text-gray-400">Loading assets...</div>;
  if (error) return <div className="text-center py-10 text-red-500">Error: {error}</div>;

  const canManageAssets = orgRole === 'org:admin';

  return (
    <div className="px-4 md:px-6 lg:px-10 pt-3">
        <div className="flex flex-col md:flex-row items-start md:items-center justify-between bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 px-4 py-2.5 rounded-xl shadow-sm">
          <div className="flex items-center w-full md:w-auto md:max-w-md bg-transparent py-1">
            <Search className="text-gray-400 dark:text-gray-500 mr-2.5" size={18} />
            <input type="text" value={searchQuery} onChange={(e) => setSearchQuery(e.target.value)} placeholder="Search assets..."
              className="text-sm outline-none placeholder-gray-500 dark:placeholder-gray-400 bg-transparent w-full text-gray-700 dark:text-gray-300"/>
          </div>
          <div className="flex items-center space-x-2 mt-2 md:mt-0">
            <button className="flex items-center text-sm px-3 py-1.5 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-md hover:bg-gray-50 dark:hover:bg-gray-600">
              <Filter size={15} className="mr-1.5" />Filter
            </button>
          </div>
        </div>
      
      <div className="mt-4 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-xl overflow-x-auto shadow-sm">
        <table className="w-full text-left text-sm min-w-[900px]">
          <thead className="bg-gray-50 dark:bg-gray-700 text-gray-600 dark:text-gray-400">
            <tr>
              <th className="px-4 py-3 w-12">
                <input type="checkbox" className="form-checkbox h-4 w-4 text-green-600 border-gray-300 dark:border-gray-600 rounded focus:ring-green-500 bg-white dark:bg-gray-700"
                  onChange={handleSelectAll} checked={selectedItems.length === currentData.length && currentData.length > 0} />
              </th>
              <th className="px-4 py-3">Asset (Title/Model)</th>
              <th className="px-4 py-3">Serial No.</th>
              <th className="px-4 py-3">Image</th>
              <th className="px-4 py-3">Status</th>
              <th className="px-4 py-3">Assigned To</th>
              <th className="px-4 py-3">Location</th>
              <th className="px-4 py-3 w-12"></th>
            </tr>
          </thead>
          <tbody className="text-gray-700 dark:text-gray-300">
            {currentData.map((asset) => (
            <tr key={asset.id} className="border-t border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700/50">
                <td className="px-4 py-3">
                  <input type="checkbox" className="form-checkbox h-4 w-4 text-green-600 border-gray-300 dark:border-gray-600 rounded focus:ring-green-500 bg-white dark:bg-gray-700"
                    checked={selectedItems.includes(asset.id)} onChange={() => handleSelectItem(asset.id)} />
                </td>
                <td className="px-4 py-3">
                  <Link href={`/assets/${asset.id}`} className="hover:underline">
                    <div className="font-medium text-gray-800 dark:text-gray-200">{asset.title}</div>
                  </Link>
                  <div className="text-xs text-gray-500 dark:text-gray-400">{asset.model}</div>
                </td>
                <td className="px-4 py-3">
                  <span className="bg-gray-100 dark:bg-gray-700 px-2.5 py-1 rounded-md text-xs font-medium text-gray-700 dark:text-gray-300">{asset.serialNumber}</span>
                </td>
                <td className="px-4 py-3">
                  {asset.imageUrl ? (
                    <a href={asset.imageUrl} target="_blank" rel="noopener noreferrer" className="hover:opacity-80">
                      <Image src={asset.imageUrl} alt={asset.title} width={40} height={40} className="rounded object-cover"/>
                    </a>
                  ) : (
                    <div className="w-10 h-10 bg-gray-100 dark:bg-gray-700 rounded flex items-center justify-center text-gray-400 dark:text-gray-500">
                      <ImageIcon size={20}/>
                    </div>
                  )}
                </td>
                <td className="px-4 py-3">
                  <div className={`inline-flex items-center text-xs px-2.5 py-1 rounded-full font-medium ${
                      asset.status.toLowerCase() === "active" ? "bg-green-100 dark:bg-green-800/30 text-green-700 dark:text-green-300" : 
                      asset.status.toLowerCase() === "inactive" ? "bg-yellow-100 dark:bg-yellow-800/30 text-yellow-700 dark:text-yellow-300" :
                      "bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300"}`}>
                    <span className={`w-2 h-2 rounded-full mr-1.5 ${
                        asset.status.toLowerCase() === "active" ? "bg-green-500 dark:bg-green-400" : 
                        asset.status.toLowerCase() === "inactive" ? "bg-yellow-500 dark:bg-yellow-400" : "bg-gray-500 dark:bg-gray-400" }`}></span>
                    {asset.status}
                  </div>
                </td>
                <td className="px-4 py-3">
                  {asset.assignedTo ? (
                    <div className="flex items-center space-x-2">
                        {asset.assignedTo.imageUrl && <Image src={asset.assignedTo.imageUrl} alt="assignee" width={24} height={24} className="rounded-full" />}
                        <div>
                            <div className="font-medium text-xs">
                                {asset.assignedTo.firstName || asset.assignedTo.email?.split('@')[0]} {asset.assignedTo.lastName}
                            </div>
                            <div className="text-gray-500 dark:text-gray-400 text-[11px]">{asset.assignedTo.email}</div>
                        </div>
                    </div>
                  ) : <span className="text-gray-400 dark:text-gray-500 text-xs italic">Unassigned</span>}
                </td>
                <td className="px-4 py-3 text-xs">
                    {asset.latitude && asset.longitude ? (
                        <a href={`https://www.google.com/maps?q=${asset.latitude},${asset.longitude}`} target="_blank" rel="noopener noreferrer"
                           className="text-blue-600 dark:text-blue-400 hover:underline flex items-center">
                            <MapPin size={12} className="mr-1"/> View Map
                        </a>
                    ) : <span className="text-gray-400 dark:text-gray-500 italic">N/A</span>}
                </td>
                <td className="px-4 py-3 text-right relative">
                   {(canManageAssets || asset.assignedToClerkUserId === currentUserId) && ( // Admin or assigned user can interact
                    <button onClick={() => setActiveMenuAssetId(asset.id === activeMenuAssetId ? null : asset.id)}
                      className="text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-200 p-1 rounded-md hover:bg-gray-100 dark:hover:bg-gray-700">
                      <MoreVertical size={18} />
                    </button>
                   )}
                  {activeMenuAssetId === asset.id && (
                    <div ref={dropdownRef} className="absolute right-0 mt-1 w-36 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-md shadow-lg text-xs z-20 py-1">
                      <Link href={`/assets/${asset.id}`} className="w-full text-left block px-3 py-1.5 hover:bg-gray-100 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-300 flex items-center">
                        <Eye size={14} className="mr-2"/> View Details
                      </Link>
                      {canManageAssets && ( // Only admins can edit/delete from table dropdown
                        <>
                          <button onClick={() => handleOpenEditModal(asset)} className="w-full text-left block px-3 py-1.5 hover:bg-gray-100 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-300 flex items-center">
                            <Edit2 size={14} className="mr-2"/> Edit Asset
                          </button>
                          <button onClick={() => handleDeleteAsset(asset.id)} className="w-full text-left block px-3 py-1.5 hover:bg-gray-100 dark:hover:bg-gray-700 text-red-600 dark:text-red-400 flex items-center">
                            <Trash2 size={14} className="mr-2"/> Delete Asset
                          </button>
                        </>
                      )}
                    </div>
                  )}
                </td>
              </tr>
            ))}
             {currentData.length === 0 && (
              <tr><td colSpan={8} className="text-center py-10 text-gray-500 dark:text-gray-400">No assets found.</td></tr>
            )}
          </tbody>
        </table>

        {totalPages > 1 && (
        <div className="flex items-center justify-between px-4 py-3 border-t border-gray-200 dark:border-gray-700 text-xs text-gray-600 dark:text-gray-400">
            <button
                onClick={() => handlePageChange(currentPage - 1)}
                disabled={currentPage === 1}
                className="flex items-center px-2.5 py-1.5 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 rounded-md hover:bg-gray-50 dark:hover:bg-gray-600 disabled:opacity-50 disabled:cursor-not-allowed"
            >
                <ArrowLeft size={14} className="mr-1" /> Previous
            </button>
            <div className="flex items-center space-x-1">
                {Array.from({ length: totalPages }, (_, i) => i + 1).map(pageNumber => (
                    <button
                        key={pageNumber}
                        onClick={() => handlePageChange(pageNumber)}
                        className={`px-2.5 py-1 rounded-md font-medium ${
                            currentPage === pageNumber 
                                ? "bg-green-100 dark:bg-green-700/50 text-green-700 dark:text-green-200" 
                                : "text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-600"
                        }`}
                    >
                        {pageNumber}
                    </button>
                ))}
            </div>
            <button
                onClick={() => handlePageChange(currentPage + 1)}
                disabled={currentPage === totalPages}
                className="flex items-center px-2.5 py-1.5 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 rounded-md hover:bg-gray-50 dark:hover:bg-gray-600 disabled:opacity-50 disabled:cursor-not-allowed"
            >
                Next <ArrowRight size={14} className="ml-1" />
            </button>
        </div>
        )}
      </div>
      {isEditModalOpen && editingAsset && (
        <EditAssetModal 
            asset={editingAsset} 
            onClose={() => {setIsEditModalOpen(false); setEditingAsset(null);}} 
            onAssetUpdated={() => {
                setIsEditModalOpen(false); 
                setEditingAsset(null);
                fetchAssets(); // Re-fetch assets after update
            }}
        />
      )}
    </div>
  );
};

export default AssetTable;

=== Folder: /c/Users/hp/desktop/clerk-webhooks/components/tracker ===
--- File: DashboardAssetAnalysis.tsx ---
"use client";
import React, { useState, useEffect, useRef } from "react";
import {
  Filter,
  List,
  LayoutGrid,
  Search,
  MoreVertical,
  ArrowLeft,
  ArrowRight,
  ExternalLink,
  Loader2, 
  AlertTriangle,
} from "lucide-react";
import { useAuth } from "@clerk/nextjs"; 

interface ApiAsset {
  id: string; 
  title: string;
  model: string;
  serialNumber: string;
  imageUrl?: string | null;
  description: string;
  status: string; 
  latitude?: number | null;
  longitude?: number | null;
  clerkOrganizationId: string;
  assignedToClerkUserId?: string | null;
  assignedToDbUserId?: string | null;
  createdAt: string; 
  updatedAt: string; 
  assignedTo?: {
    firstName?: string | null;
    lastName?: string | null;
    email?: string | null;
    imageUrl?: string | null;
    clerkUserId?: string | null;
  } | null;
}

interface DisplayAsset {
  id: string; 
  name: string; 
  assetIdDisplay: string; 
  pictureUrl?: string | null;
  status: string;
  statusColor: "green" | "red" | "yellow" | "gray";
  assigneeTeam: string; 
}

interface StatusChartData {
  name: string;
  value: number;
}

const DashboardAssetAnalysis: React.FC = () => {
  const [assets, setAssets] = useState<DisplayAsset[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [currentPage, setCurrentPage] = useState(1);
  const assetsPerPage = 5;
  const [activeMenuIndex, setActiveMenuIndex] = useState<number | null>(null);
  const dropdownRef = useRef<HTMLDivElement>(null);
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedItems, setSelectedItems] = useState<string[]>([]);
  const { orgId } = useAuth(); 
  const [statusChartData, setStatusChartData] = useState<StatusChartData[]>([]);

  useEffect(() => {
    const fetchAssets = async () => {
      if (!orgId) {
        setIsLoading(false); 
        setAssets([]); 
        return;
      }
      setIsLoading(true);
      setError(null);
      try {
        const response = await fetch(`/api/assets`, { credentials: 'include' });
        if (!response.ok) {
          throw new Error(`Failed to fetch assets: ${response.status} ${response.statusText}`);
        }
        const apiAssets: ApiAsset[] = await response.json();
        
        const displayAssets = apiAssets.map(asset => {
          let statusColor: DisplayAsset['statusColor'] = 'gray';
          switch (asset.status.toLowerCase()) {
            case 'active': statusColor = 'green'; break;
            case 'inactive': statusColor = 'red'; break;
            case 'maintenance': statusColor = 'yellow'; break;
            default: statusColor = 'gray';
          }

          let assigneeName = "Unassigned";
          if (asset.assignedTo) {
            assigneeName = `${asset.assignedTo.firstName || ''} ${asset.assignedTo.lastName || ''}`.trim();
            if (!assigneeName && asset.assignedTo.email) assigneeName = asset.assignedTo.email;
            if (!assigneeName && asset.assignedTo.clerkUserId) assigneeName = `User (${asset.assignedTo.clerkUserId.substring(0,5)}...)`;
            if (!assigneeName) assigneeName = "Assigned (No Name)";
          } else if (asset.assignedToClerkUserId) {
            assigneeName = `User ID: ${asset.assignedToClerkUserId.substring(0,8)}...`;
          }

          return {
            id: asset.id,
            name: asset.title,
            assetIdDisplay: asset.serialNumber,
            pictureUrl: asset.imageUrl,
            status: asset.status,
            statusColor: statusColor,
            assigneeTeam: assigneeName, 
          };
        });
        setAssets(displayAssets);

        // Process data for status distribution chart from API assets
        const statusCounts: { [key: string]: number } = {};
        apiAssets.forEach(asset => { 
          statusCounts[asset.status] = (statusCounts[asset.status] || 0) + 1;
        });
        const chartData = Object.entries(statusCounts).map(([name, value]) => ({ name, value }));
        setStatusChartData(chartData);

      } catch (err) {
        setError(err instanceof Error ? err.message : "An unknown error occurred");
        console.error(err);
      }
      setIsLoading(false);
    };

    fetchAssets();
  }, [orgId]); 

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setActiveMenuIndex(null);
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, []);

  const handleSelectItem = (id: string) => {
    setSelectedItems(prev => prev.includes(id) ? prev.filter(itemId => itemId !== id) : [...prev, id]);
  };

  const handleSelectAll = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.checked) {
      setSelectedItems(currentData.map(item => item.id));
    } else {
      setSelectedItems([]);
    }
  };

  const filteredAssets = assets.filter((asset) =>
    `${asset.name} ${asset.assetIdDisplay} ${asset.assigneeTeam}`
      .toLowerCase()
      .includes(searchQuery.toLowerCase())
  );
  const totalPages = Math.ceil(filteredAssets.length / assetsPerPage);
  const currentData = filteredAssets.slice((currentPage - 1) * assetsPerPage, currentPage * assetsPerPage);

  const handlePageChange = (page: number) => {
    if (page >= 1 && page <= totalPages) {
      setCurrentPage(page);
      setActiveMenuIndex(null);
    }
  };

  if (isLoading) {
    return (
      <div className="px-0 md:px-0 lg:px-0 flex items-center justify-center min-h-[300px] bg-white border border-gray-200 rounded-xl p-4 sm:p-6 shadow-sm">
        <Loader2 className="animate-spin text-gray-500" size={32} />
        <p className="ml-2 text-gray-500">Loading asset analysis...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="px-0 md:px-0 lg:px-0 flex flex-col items-center justify-center min-h-[300px] bg-white border border-gray-200 rounded-xl p-4 sm:p-6 shadow-sm text-red-600">
        <AlertTriangle size={32} className="mb-2" />
        <p className="font-semibold">Error loading data</p>
        <p className="text-sm text-red-500">{error}</p>
      </div>
    );
  }
  
  return (
    <div className="px-0 md:px-0 lg:px-0"> 
      <div className="bg-white border border-gray-200 rounded-xl p-4 sm:p-6 shadow-sm">
        <div className="mb-4 sm:mb-5">
          <h3 className="text-lg font-semibold text-gray-900">Asset Analysis</h3>
          <p className="text-sm text-gray-500 mt-0.5">Manage your assets and track current usage status across teams.</p>
        </div>
        
        <div className="flex flex-col md:flex-row items-start md:items-center justify-between bg-white border border-gray-200 px-3 sm:px-4 py-2.5 rounded-lg mb-4">
          <div className="flex items-center w-full md:w-auto md:max-w-sm bg-transparent py-1">
            <Search className="text-gray-400 mr-2" size={16} />
            <input
              type="text"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              placeholder="Search assets..."
              className="text-xs sm:text-sm outline-none placeholder-gray-500 bg-transparent w-full"
            />
          </div>
          <div className="flex items-center space-x-2 mt-2 md:mt-0">
            <button className="flex items-center text-xs sm:text-sm px-2.5 py-1.5 bg-white border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50">
              <Filter size={14} className="mr-1" />
              Filter
            </button>
            <button className="p-1.5 rounded-md bg-gray-100 hover:bg-gray-200">
              <List size={16} className="text-gray-700" />
            </button>
            <button className="p-1.5 rounded-md bg-white border border-gray-300 hover:bg-gray-50">
              <LayoutGrid size={16} className="text-gray-700" />
            </button>
          </div>
        </div>
        
        <div className="border border-gray-200 rounded-lg overflow-x-auto">
          <table className="w-full text-left text-sm min-w-[600px]">
            <thead className="bg-gray-50 text-xs text-gray-500 uppercase tracking-wider">
              <tr>
                <th className="px-3 sm:px-4 py-3 w-10 sm:w-12">
                  <input 
                    type="checkbox" 
                    className="form-checkbox h-3.5 w-3.5 sm:h-4 sm:w-4 text-green-600 border-gray-300 rounded focus:ring-green-500"
                    onChange={handleSelectAll}
                    checked={selectedItems.length === currentData.length && currentData.length > 0}
                    disabled={currentData.length === 0} 
                  />
                </th>
                <th className="px-3 sm:px-4 py-3">Name</th>
                <th className="px-3 sm:px-4 py-3">Asset ID</th>
                <th className="px-3 sm:px-4 py-3 hidden md:table-cell">Picture</th>
                <th className="px-3 sm:px-4 py-3">Status</th>
                <th className="px-3 sm:px-4 py-3 hidden lg:table-cell">Assignee</th>
                <th className="px-3 sm:px-4 py-3 w-10 sm:w-12"></th>
              </tr>
            </thead>
            <tbody className="text-gray-700 divide-y divide-gray-200">
              {currentData.map((asset, index) => (
              <tr key={asset.id} className="hover:bg-gray-50">
                  <td className="px-3 sm:px-4 py-3">
                    <input 
                      type="checkbox" 
                      className="form-checkbox h-3.5 w-3.5 sm:h-4 sm:w-4 text-green-600 border-gray-300 rounded focus:ring-green-500"
                      checked={selectedItems.includes(asset.id)}
                      onChange={() => handleSelectItem(asset.id)}
                    />
                  </td>
                  <td className="px-3 sm:px-4 py-3">
                    <div className="font-medium text-gray-800 text-xs sm:text-sm">{asset.name}</div>
                  </td>
                  <td className="px-3 sm:px-4 py-3">
                    <span className="bg-gray-100 px-2 py-0.5 rounded text-xs font-medium text-gray-600">{asset.assetIdDisplay}</span>
                  </td>
                  <td className="px-3 sm:px-4 py-3 hidden md:table-cell">
                    {asset.pictureUrl ? (
                      <a
                        href={asset.pictureUrl}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="flex items-center text-blue-500 font-medium text-xs hover:text-blue-600 hover:underline"
                      >
                        View
                        <ExternalLink size={10} className="ml-0.5" />
                      </a>
                    ) : (
                      <span className="text-xs text-gray-400">No Image</span>
                    )}
                  </td>
                  <td className="px-3 sm:px-4 py-3">
                    <div
                      className={`inline-flex items-center text-[11px] sm:text-xs px-2 py-0.5 rounded-full font-medium ${ 
                        asset.statusColor === 'green' ? 'bg-green-100 text-green-700' :
                        asset.statusColor === 'red'   ? 'bg-red-100 text-red-700' :
                        asset.statusColor === 'yellow' ? 'bg-yellow-100 text-yellow-700' :
                        'bg-gray-100 text-gray-700'
                      }`}
                    >
                      <span
                        className={`w-1.5 h-1.5 rounded-full mr-1 ${ 
                          asset.statusColor === 'green' ? 'bg-green-500' :
                          asset.statusColor === 'red'   ? 'bg-red-500' :
                          asset.statusColor === 'yellow' ? 'bg-yellow-500' :
                          'bg-gray-500'
                        }`}
                      ></span>
                      {asset.status}
                    </div>
                  </td>
                  <td className="px-3 sm:px-4 py-3 font-medium hidden lg:table-cell">
                  <span className="bg-gray-100 px-2 py-0.5 rounded text-xs font-medium text-gray-600">
                    {asset.assigneeTeam}
                  </span>
                  </td>
                  <td className="px-3 sm:px-4 py-3 text-right relative">
                    <button 
                      onClick={() => setActiveMenuIndex(index === activeMenuIndex ? null : index)}
                      className="text-gray-400 hover:text-gray-600 p-1 rounded-md hover:bg-gray-100"
                    >
                      <MoreVertical size={16} />
                    </button>
                    {activeMenuIndex === index && (
                      <div
                        ref={dropdownRef}
                        className="absolute right-0 mt-1 w-28 bg-white border border-gray-200 rounded-md shadow-lg text-xs z-10 py-1"
                      >
                        <a href={`/assets/${asset.id}`} className="block px-2.5 py-1.5 hover:bg-gray-100 text-gray-700">Details</a>
                        <a href="#" className="block px-2.5 py-1.5 hover:bg-gray-100 text-red-600">Delete</a>
                      </div>
                    )}
                  </td>
                </tr>
              ))}
               {currentData.length === 0 && !isLoading && (
                <tr>
                  <td colSpan={7} className="text-center py-8 text-gray-500 text-sm">
                    No assets found matching your criteria.
                  </td>
                </tr>
              )}
            </tbody>
          </table>
  
          {totalPages > 1 && (
          <div className="flex items-center justify-between px-3 sm:px-4 py-2.5 border-t border-gray-200 text-xs text-gray-600">
            <button
              onClick={() => handlePageChange(currentPage - 1)}
              className="flex items-center px-2 py-1 border border-gray-300 bg-white rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
              disabled={currentPage === 1}
            >
              <ArrowLeft size={12} className="mr-1" />
              Prev
            </button>
             <span className="font-medium">Page {currentPage} of {totalPages}</span>
            <button
              onClick={() => handlePageChange(currentPage + 1)}
              className="flex items-center px-2 py-1 border border-gray-300 bg-white rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
              disabled={currentPage === totalPages}
            >
              Next
              <ArrowRight size={12} className="ml-1" />
            </button>
          </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default DashboardAssetAnalysis;

=== Folder: /c/Users/hp/desktop/clerk-webhooks/components/tracker ===
--- File: DashboardComp.tsx ---
// components/tracker/DashboardComp.tsx
"use client";
import React, { useEffect, useState } from "react";
import { FileText, Users, Briefcase } from "lucide-react"; // Added import for icons
// ... other imports
import { useOrganization, useAuth, OrganizationSwitcher } from "@clerk/nextjs";
import AssetStatusPieChart from "@/components/dashboard/AssetStatusPieChart"; // Added import
import AssetModelDistributionChart from "@/components/dashboard/AssetModelDistributionChart"; // Added import

// Simplified asset type for dashboard cards
interface DashboardAssetSummary {
  totalAssets: number;
  activeAssets: number;
  inactiveAssets: number;
  // Potentially add assetsAssignedToMe for members
}

interface Asset {
  id: string;
  // ... other properties
  status: string;
  userId?: string | null;
  model?: string | null; // Ensure model is part of the Asset interface
  assignedToClerkUserId?: string | null; // Ensure this is part of your Asset type if used for filtering
}

// Interface for a team member (simplified from Clerk's OrganizationMembership)
interface TeamMember {
  id: string;
  role: string;
  publicUserData?: {
    userId: string;
    firstName?: string | null;
    lastName?: string | null;
    imageUrl?: string;
    identifier?: string; // Primary email or username
  };
}

const DashboardComp: React.FC = () => {
  //console.log('[DashboardComp] Component rendering...'); // Log component render
  const { organization, isLoaded: orgLoaded } = useOrganization();
  const { userId, orgRole, isLoaded: authLoaded } = useAuth(); // orgRole can be null for personal accounts
  const [assetSummary, setAssetSummary] = useState<DashboardAssetSummary | null>(null);
  const [teamMembersCount, setTeamMembersCount] = useState(0);
  const [teamMembersList, setTeamMembersList] = useState<TeamMember[]>([]); // New state for member list
  const [isLoading, setIsLoading] = useState(true); // Start with true
  const [error, setError] = useState<string | null>(null);
  const [pieChartData, setPieChartData] = useState<{ name: string; value: number }[]>([]);
  const [modelChartData, setModelChartData] = useState<{ name: string; value: number }[]>([]);

  useEffect(() => {
    //console.log('[DashboardComp] useEffect triggered. Deps:', { orgId: organization?.id, userId, orgRole, orgLoaded, authLoaded }); // Log useEffect trigger

    const fetchDashboardData = async () => {
      //console.log('[DashboardComp] fetchDashboardData called. AuthLoaded:', authLoaded, 'OrgLoaded:', orgLoaded, 'Org:', organization?.id); // Log auth/org loaded state
      if (!authLoaded) {
        //console.log('[DashboardComp] Exiting fetchDashboardData: auth not loaded yet.');
        return; // Wait for auth to load
      } // <<< Added missing closing brace here

      // If org context is still loading and we have an orgId, wait for it.
      // If no orgId (personal account), orgLoaded might remain false or org is null, proceed with userId.
      if (organization && !orgLoaded) {
        //console.log('[DashboardComp] Exiting fetchDashboardData: organization selected but not loaded yet.');
        return; 
      }

      //console.log('[DashboardComp] Proceeding with data fetch...');
      setIsLoading(true);
      setError(null);

      try {
        let apiUrl = "/api/assets";
        if (organization?.id) {
          apiUrl = `/api/assets?orgId=${organization.id}`;
        } else if (!userId) {
          // This case should ideally not be hit if authLoaded is true and we have a user
          // but as a safeguard:
          setIsLoading(false);
          setError("User not authenticated.");
          return;
        }
        // If only userId is available (personal account), API will use it from session

        const response = await fetch(apiUrl);
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || `API request failed: ${response.status}`);
        }
        const data = await response.json();

        let relevantAssets = data;
        if (orgRole !== 'org:admin' && userId) {
            relevantAssets = data.filter(a => a.assignedToClerkUserId === userId);
        }
        
        const active = relevantAssets.filter(a => a.status.toLowerCase() === 'active').length;
        const inactive = relevantAssets.length - active;
        
        setAssetSummary({
          totalAssets: relevantAssets.length,
          activeAssets: active,
          inactiveAssets: inactive,
        });
        setPieChartData([
          { name: "Active", value: active },
          { name: "Inactive", value: inactive },
        ]);

        // Process data for model distribution chart
        if (data.length > 0) {
          const modelCounts: { [key: string]: number } = {};
          data.forEach((asset: Asset) => {
            const modelName = asset.model || 'Unknown Model';
            modelCounts[modelName] = (modelCounts[modelName] || 0) + 1;
          });
          const newModelChartData = Object.entries(modelCounts).map(([name, value]) => ({ name, value }));
          setModelChartData(newModelChartData);
        } else {
          setModelChartData([]);
          //console.log('[DashboardComp] No processed assets for model chart.');
        }

        //console.log('[DashboardComp] Attempting to fetch team members. Org ID:', organization?.id, 'Org Name:', organization?.name, 'Role:', orgRole);
        if (organization && typeof organization.getMemberships === 'function') {
          //console.log('[DashboardComp] organization object seems valid and has getMemberships method.');
          try {
            const memberships = await organization.getMemberships();
            //console.log('[DashboardComp] Raw memberships data:', memberships);
            //console.log('[DashboardComp] Type of memberships:', typeof memberships, 'Is Array:', Array.isArray(memberships));

            if (memberships && typeof memberships === 'object' && Array.isArray(memberships.data)) {
              setTeamMembersCount(memberships.data.length);
              setTeamMembersList(memberships.data as TeamMember[]); // Store the list of members
              //console.log('[DashboardComp] Successfully set teamMembersCount to (from data.length):', memberships.data.length);
            } else if (memberships && typeof memberships === 'object' && typeof memberships.total_count === 'number') {
              // Fallback to total_count if data array isn't as expected but total_count is present
              setTeamMembersCount(memberships.total_count);
              setTeamMembersList([]); // Clear list if we only have total_count and not the data array
              //console.log('[DashboardComp] Successfully set teamMembersCount to (from total_count):', memberships.total_count);
            } else {
              //console.error('[DashboardComp] memberships object does not have expected structure (data array or total_count). Setting teamMembersCount to 0.');
              setTeamMembersCount(0); // Fallback if structure is unexpected
              setTeamMembersList([]); // Clear list
            }
          } catch (e) {
            //console.error('[DashboardComp] Error calling organization.getMemberships() or processing its result:', e);
            setTeamMembersCount(0); // Fallback on error
            setTeamMembersList([]); // Clear list on error
          }
        } else {
          setTeamMembersCount(0); // Reset if no organization or getMemberships is not a function
          setTeamMembersList([]); // Clear list
          //console.log('[DashboardComp] No organization context, or organization.getMemberships is not a function. Org:', organization);
        }

        setIsLoading(false);
      } catch (error) {
        //console.error("Failed to fetch dashboard data:", error);
        setIsLoading(false);
        setError("Failed to fetch dashboard data.");
      }
    };

    fetchDashboardData();
  }, [organization, userId, orgRole, orgLoaded, authLoaded]);

  //console.log('[DashboardComp] Current state before return:', { isLoading, error, assetSummary, modelChartData, teamMembersCount, orgRole, orgId: organization?.id }); // Log state before render

  // Determine the title for the pie chart based on context
  const pieChartTitle = organization ? "Asset Status in My Organization" : "My Asset Status";

  if (isLoading) {
    return (
      <div className="text-center py-10">Loading dashboard...</div>
    );
  }

  if (!organization) {
     return (
        <div className="text-center py-10 bg-white rounded-xl p-6 border border-dashed border-gray-300">
            <h2 className="text-lg font-semibold mb-2">Welcome to ExpenseScout!</h2>
            <p className="text-gray-600 mb-4">Please select or create an organization to view your dashboard.</p>
            <OrganizationSwitcher hidePersonal={true} />
        </div>
    );
  }
  
  const noDataExists = !assetSummary || assetSummary.totalAssets === 0;
  const noModelData = !modelChartData || modelChartData.length === 0;

  //console.log('[DashboardComp] Render conditions:', { noDataExists, noModelData, orgRole, teamMembersCount, isOrgContext: !!organization }); // Log conditions for chart/team visibility

  return (
    <div className="space-y-4 md:space-y-6">
        {/* <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-2">
            <h1 className="text-xl sm:text-2xl font-semibold text-gray-900">
                {orgRole === 'org:admin' ? `${organization.name} Admin Dashboard` : `${organization.name} Member View`}
            </h1>
            <OrganizationSwitcher hidePersonal={true}/>
        </div> */}

      {/* Cards */}
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-5">
        {[
          { title: orgRole === 'org:admin' ? "Total Assets (Org)" : "My Assigned Assets", value: assetSummary?.totalAssets || 0, Icon: FileText, iconBg: "bg-green-100", iconColor: "text-green-600" },
          { title: "Active Assets", value: assetSummary?.activeAssets || 0, Icon: Users /* TODO: Change Icon */, iconBg: "bg-blue-100", iconColor: "text-blue-600" },
          { title: "Inactive Assets", value: assetSummary?.inactiveAssets || 0, Icon: Briefcase /* TODO: Change Icon */, iconBg: "bg-purple-100", iconColor: "text-purple-600" },
        ].map(card => (
          // ... card rendering from your existing code, ensure 'value' is correctly sourced
           <div key={card.title} className="bg-white border border-gray-200 rounded-xl p-4 shadow-sm">
            <div className="flex justify-between items-start">
              <div>
                <h4 className="text-sm font-medium text-gray-500">{card.title}</h4>
                <div className="text-2xl font-semibold text-gray-900 mt-1">{card.value}</div>
                {/* Add change logic if available */}
              </div>
              <div className={`p-2.5 rounded-full ${card.iconBg}`}>
                <card.Icon size={18} className={card.iconColor} />
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* Chart Section */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 md:gap-5 mt-6">
        <div className="bg-white border border-gray-200 rounded-xl p-4 shadow-sm">
          <h4 className="text-sm font-medium text-gray-500 mb-3">
            {pieChartTitle}
          </h4>
          {(assetSummary?.activeAssets || 0) + (assetSummary?.inactiveAssets || 0) > 0 ? (
            <AssetStatusPieChart data={pieChartData} />
          ) : (
            <p className="text-center text-gray-500 py-8">No asset data to display.</p>
          )}
        </div>

        {/* Asset Model Distribution Chart Section */}
        {modelChartData.length > 0 && (
          <div className="bg-white border border-gray-200 rounded-xl p-4 shadow-sm">
            <h4 className="text-sm font-medium text-gray-500 mb-3">Asset Distribution by Model</h4>
            <AssetModelDistributionChart data={modelChartData} />
          </div>
        )}
      </div>

      {/* Team Overview Card - For Admins */} 
      {organization && orgRole === 'org:admin' && (
        <div className="bg-white border border-gray-200 rounded-xl p-4 shadow-sm">
          <h4 className="text-sm font-medium text-gray-500 mb-3">Team Overview</h4>
          <p className="text-2xl font-semibold text-gray-900 mb-3">{teamMembersCount} Members</p>
          
          {teamMembersList.length > 0 ? (
            <ul className="space-y-3 max-h-60 overflow-y-auto">
              {teamMembersList.map((member) => (
                <li key={member.id || member.publicUserData?.userId} className="flex items-center space-x-3 p-2 hover:bg-gray-50 rounded-md">
                  {member.publicUserData?.imageUrl && (
                    <img 
                      src={member.publicUserData.imageUrl} 
                      alt={`${member.publicUserData.firstName || ''} ${member.publicUserData.lastName || ''}`.trim() || member.publicUserData.identifier}
                      className="w-10 h-10 rounded-full object-cover"
                    />
                  )}
                  <div>
                    <p className="text-sm font-medium text-gray-800">
                      {`${member.publicUserData?.firstName || ''} ${member.publicUserData?.lastName || ''}`.trim() || member.publicUserData?.identifier}
                    </p>
                    <p className="text-xs text-gray-500 capitalize">
                      {member.role.replace('org:', '')} 
                    </p>
                  </div>
                </li>
              ))}
            </ul>
          ) : (
            <p className="text-xs text-gray-400 mt-1">
              {teamMembersCount > 0 ? 'Member details are not available.' : 'No members in this organization yet.'}
            </p>
          )}
        </div>
      )}
    </div>
  );
};

export default DashboardComp;

=== Folder: /c/Users/hp/desktop/clerk-webhooks/components/tracker ===
--- File: EditAssetModal.tsx ---
"use client";
import React, { useState, useRef, ChangeEvent, DragEvent, useEffect } from "react";
import { Briefcase, X, ImageIcon, MapPin, UserPlus, ChevronDown, Trash2 } from "lucide-react";
import Image from "next/image";
import userImgPlaceholder from "../../public/next.svg";
import { useOrganization, useUser } from "@clerk/nextjs";

// Re-use Asset type definition (ensure it's consistent or imported)
interface Asset {
  id: string;
  title: string;
  model: string;
  serialNumber: string;
  imageUrl?: string | null;
  description: string;
  status: string;
  latitude?: number | null;
  longitude?: number | null;
  clerkOrganizationId: string;
  assignedToClerkUserId?: string | null;
  assignedTo?: {
    clerkUserId: string;
    firstName?: string | null;
    lastName?: string | null;
    email?: string | null;
    imageUrl?: string | null;
  } | null;
}

interface OrgMember {
  id: string;
  identifier: string;
  firstName?: string | null;
  lastName?: string | null;
  imageUrl?: string;
  role: string;
}

interface EditAssetModalProps {
  asset: Asset;
  onClose: () => void;
  onAssetUpdated: () => void;
}

const EditAssetModal: React.FC<EditAssetModalProps> = ({ asset, onClose, onAssetUpdated }) => {
  const { organization } = useOrganization();
  const { user } = useUser();

  const [title, setTitle] = useState(asset.title);
  const [model, setModel] = useState(asset.model);
  const [serialNumber, setSerialNumber] = useState(asset.serialNumber);
  const [assetImageBase64, setAssetImageBase64] = useState<string | null>(null);
  const [assetImagePreview, setAssetImagePreview] = useState<string | null>(asset.imageUrl || null);
  const [removeCurrentImage, setRemoveCurrentImage] = useState(false);
  const [description, setDescription] = useState(asset.description);
  const [latitude, setLatitude] = useState(asset.latitude?.toString() || "");
  const [longitude, setLongitude] = useState(asset.longitude?.toString() || "");
  const [status, setStatus] = useState(asset.status);

  const [assigneeDropdownOpen, setAssigneeDropdownOpen] = useState(false);
  const [selectedAssigneeClerkId, setSelectedAssigneeClerkId] = useState<string | null>(asset.assignedToClerkUserId || null);
  const [orgMembers, setOrgMembers] = useState<OrgMember[]>([]);
  const [memberSearchQuery, setMemberSearchQuery] = useState("");
  
  const [errors, setErrors] = useState<{ [key: string]: string | boolean }>({});
  const [isLoading, setIsLoading] = useState(false);
  const [formError, setFormError] = useState<string | null>(null);

  const fileInputRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    const fetchOrgMembers = async () => {
      if (organization) {
        try {
          const memberships = await organization.getMemberships();
          const members = memberships.data.map(mem => ({
            id: mem.publicUserData.userId!,
            identifier: mem.publicUserData.identifier,
            firstName: mem.publicUserData.firstName,
            lastName: mem.publicUserData.lastName,
            imageUrl: mem.publicUserData.imageUrl,
            role: mem.role,
          }));
          setOrgMembers(members);
        } catch (error) {
          console.error("Failed to fetch organization members:", error);
        }
      }
    };
    fetchOrgMembers();
  }, [organization]);


  const validateForm = () => {
    const newErrors: { [key: string]: string } = {};
    if (!title.trim()) newErrors.title = "Title is required.";
    if (!model.trim()) newErrors.model = "Model is required.";
    if (!serialNumber.trim()) newErrors.serialNumber = "Serial number is required.";
    if (!description.trim()) newErrors.description = "Description is required.";
    if (latitude && isNaN(parseFloat(latitude))) newErrors.latitude = "Invalid latitude.";
    if (longitude && isNaN(parseFloat(longitude))) newErrors.longitude = "Invalid longitude.";
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleFormSubmit = async () => {
    if (!validateForm()) return;
    if (!organization) {
      setFormError("No active organization selected.");
      return;
    }
    setIsLoading(true);
    setFormError(null);

    const assetUpdateData: any = {
      title,
      model,
      serialNumber,
      description,
      status,
      latitude: latitude ? parseFloat(latitude) : undefined,
      longitude: longitude ? parseFloat(longitude) : undefined,
      assignedToClerkUserId: selectedAssigneeClerkId, // Will be null if unassigned
    };

    if (removeCurrentImage) {
      assetUpdateData.removeImage = true;
    } else if (assetImageBase64) { // Only send if new image is selected
      assetUpdateData.imageBase64 = assetImageBase64;
    }
    // If neither removeCurrentImage nor assetImageBase64 is set, imageUrl won't be touched by backend logic if not explicitly passed

    try {
      const response = await fetch(`/api/assets/${asset.id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(assetUpdateData),
        credentials: 'include',
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({ message: `Failed to update asset (${response.status} ${response.statusText})` }));
        console.error(errorData.message);
        throw new Error(errorData.message);
      }
      onAssetUpdated();
      onClose();
    } catch (error: any) {
      setFormError(error.message || "An unexpected error occurred.");
      console.error("Asset update error:", error);
    } finally {
      setIsLoading(false);
    }
  };
  
  const handleFileRead = (file: File) => {
    const reader = new FileReader();
    reader.onloadend = () => {
      setAssetImageBase64(reader.result as string);
      setAssetImagePreview(reader.result as string);
      setRemoveCurrentImage(false); // If a new image is chosen, don't also try to remove
      setErrors(prev => ({...prev, assetImage: false}));
    };
    reader.onerror = () => {
        setFormError("Failed to read file.");
        setErrors(prev => ({...prev, assetImage: "Failed to read file."}));
    };
    reader.readAsDataURL(file);
  };

  const handleImageUpload = (e: ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
       if (file.size > 2 * 1024 * 1024) { // 2MB limit
        setFormError("Image size should not exceed 2MB.");
        setErrors(prev => ({...prev, assetImage: "Image size should not exceed 2MB."}));
        return;
      }
      handleFileRead(file);
    }
  };

  const handleImageDrop = (e: DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    const file = e.dataTransfer.files?.[0];
    if (file && file.type.startsWith("image/")) {
       if (file.size > 2 * 1024 * 1024) {
        setFormError("Image size should not exceed 2MB.");
        setErrors(prev => ({...prev, assetImage: "Image size should not exceed 2MB."}));
        return;
      }
      handleFileRead(file);
    }
  };

  const handleRemoveImage = () => {
    setAssetImageBase64(null);
    setAssetImagePreview(null);
    setRemoveCurrentImage(true);
  };

  const filteredMembers = orgMembers.filter(member =>
    `${member.firstName || ''} ${member.lastName || ''} ${member.identifier}`.toLowerCase().includes(memberSearchQuery.toLowerCase())
  );

  const selectedAssigneeDetails = selectedAssigneeClerkId
    ? orgMembers.find(m => m.id === selectedAssigneeClerkId)
    : null;


  return (
    <div className="fixed inset-0 bg-black/30 backdrop-blur-sm z-50 flex items-center justify-center px-4">
      <div className="bg-white w-[600px] max-w-[95%] rounded-xl p-6 shadow-xl relative max-h-[90vh] overflow-y-auto">
        <button
          onClick={onClose}
          className="absolute top-4 right-4 text-gray-500 hover:text-black disabled:opacity-50"
          disabled={isLoading}
        >
          <X size={18} />
        </button>
        <div className="flex justify-center mb-4">
          <div className="bg-[#e4f7ec] p-3 rounded-full">
            <Briefcase size={22} className="text-[#34BC68]" />
          </div>
        </div>
        <h2 className="text-lg font-semibold text-center mb-1">Edit Asset</h2>
        <p className="text-sm text-gray-600 text-center mb-6">
          Update the details for the asset: {asset.title}.
        </p>
        {formError && <p className="text-sm text-red-500 text-center mb-3">{formError}</p>}
        <div className="space-y-3">
          {/* Title */}
          <div>
            <label className="text-sm text-black font-medium">Title <span className="text-red-500">*</span></label>
            <input value={title} onChange={(e) => { setTitle(e.target.value); setErrors(prev => ({ ...prev, title: false })); }}
              className={`w-full border ${errors.title ? "border-red-400" : "border-gray-300"} rounded-md py-2 px-3 text-sm outline-none`} />
            {errors.title && typeof errors.title === 'string' && <p className="text-xs text-red-500 mt-1">{errors.title}</p>}
          </div>

          {/* Model & Serial */}
          <div className="flex space-x-4">
            <div className="w-1/2">
              <label className="text-sm font-medium text-black">Model <span className="text-red-500">*</span></label>
              <input value={model} onChange={(e) => { setModel(e.target.value); setErrors(prev => ({ ...prev, model: false })); }}
                className={`w-full border ${errors.model ? "border-red-400" : "border-gray-300"} rounded-md py-2 px-3 text-sm outline-none`} />
              {errors.model && typeof errors.model === 'string' && <p className="text-xs text-red-500 mt-1">{errors.model}</p>}
            </div>
            <div className="w-1/2">
              <label className="text-sm font-medium text-black">Serial Number <span className="text-red-500">*</span></label>
              <input value={serialNumber} onChange={(e) => { setSerialNumber(e.target.value); setErrors(prev => ({ ...prev, serialNumber: false })); }}
                className={`w-full border ${errors.serialNumber ? "border-red-400" : "border-gray-300"} rounded-md py-2 px-3 text-sm outline-none`} />
              {errors.serialNumber && typeof errors.serialNumber === 'string' && <p className="text-xs text-red-500 mt-1">{errors.serialNumber}</p>}
            </div>
          </div>

          {/* Asset Image */}
          <div className="mb-4">
            <label className="text-sm font-medium text-black mb-2 block">Asset Image</label>
            <div className="flex items-center space-x-3 sm:space-x-5">
              <div onClick={() => fileInputRef.current?.click()} className="w-16 h-16 flex-shrink-0 flex items-center justify-center bg-gray-100 rounded-md border border-gray-300 cursor-pointer relative">
                {assetImagePreview ? (
                  <Image src={assetImagePreview} alt="Preview" layout="fill" className="rounded-md object-cover" />
                ) : (<ImageIcon size={24} className="text-gray-500" />)}
                <input type="file" ref={fileInputRef} className="hidden" accept="image/*" onChange={handleImageUpload} />
              </div>
              <div className="flex-grow space-y-2">
                <div onClick={() => fileInputRef.current?.click()} onDragOver={(e) => e.preventDefault()} onDrop={handleImageDrop}
                  className={`border border-dashed ${errors.assetImage ? "border-red-400" : "border-gray-300"} rounded-md p-3 cursor-pointer hover:border-[#6941C6] text-sm text-gray-500 text-center`}>
                  <span className="text-[#6941C6] font-medium">Click to upload</span> or drag & drop (Max 2MB)
                  <p className="text-xs">Replace current image</p>
                </div>
                {asset.imageUrl && !removeCurrentImage && ( // Show remove button only if there's an existing image and it's not marked for removal yet
                    <button 
                        onClick={handleRemoveImage}
                        className="text-xs text-red-600 hover:text-red-800 flex items-center"
                        disabled={isLoading}
                    >
                        <Trash2 size={14} className="mr-1" /> Remove Current Image
                    </button>
                )}
                 {removeCurrentImage && <p className="text-xs text-orange-600">Current image will be removed on save.</p>}
              </div>
            </div>
            {errors.assetImage && typeof errors.assetImage === 'string' && (
              <p className="text-sm text-red-500 mt-1">{errors.assetImage}</p>
            )}
          </div>

          {/* Description */}
          <div>
            <label className="text-sm font-medium text-black">Description <span className="text-red-500">*</span></label>
            <textarea value={description} onChange={(e) => { setDescription(e.target.value); setErrors(prev => ({ ...prev, description: false })); }}
              className={`w-full border ${errors.description ? "border-red-400" : "border-gray-300"} rounded-md py-2 px-3 text-sm outline-none min-h-[80px]`} />
            {errors.description && typeof errors.description === 'string' && <p className="text-xs text-red-500 mt-1">{errors.description}</p>}
          </div>

          {/* Latitude & Longitude */}
          <div className="flex space-x-4">
            <div className="w-1/2">
              <label className="text-sm font-medium text-black flex items-center"><MapPin size={14} className="mr-1 text-gray-500" /> Latitude</label>
              <input type="number" value={latitude} onChange={(e) => setLatitude(e.target.value)}
                className={`w-full border ${errors.latitude ? "border-red-400" : "border-gray-300"} rounded-md py-2 px-3 text-sm outline-none`} />
              {errors.latitude && typeof errors.latitude === 'string' && <p className="text-xs text-red-500 mt-1">{errors.latitude}</p>}
            </div>
            <div className="w-1/2">
              <label className="text-sm font-medium text-black flex items-center"><MapPin size={14} className="mr-1 text-gray-500" /> Longitude</label>
              <input type="number" value={longitude} onChange={(e) => setLongitude(e.target.value)}
                className={`w-full border ${errors.longitude ? "border-red-400" : "border-gray-300"} rounded-md py-2 px-3 text-sm outline-none`} />
              {errors.longitude && typeof errors.longitude === 'string' && <p className="text-xs text-red-500 mt-1">{errors.longitude}</p>}
            </div>
          </div>
          
          {/* Status */}
          <div>
            <label className="text-sm font-medium text-black">Status</label>
            <select value={status} onChange={(e) => setStatus(e.target.value)}
              className="w-full border border-gray-300 rounded-md py-2 px-3 text-sm outline-none">
              <option value="Active">Active</option>
              <option value="Inactive">Inactive</option>
              {/* Add more relevant statuses */}
              <option value="Maintenance">Maintenance</option>
              <option value="Retired">Retired</option>
            </select>
          </div>

          {/* Assign User */}
          <div className="relative">
            <label className="text-sm text-black font-medium flex items-center">
              <UserPlus size={14} className="mr-1 text-gray-500" /> Assign to Member
            </label>
             <div className="flex items-center space-x-2">
                <div
                    className={`flex-grow border border-gray-300 rounded-md py-2 px-3 text-sm flex justify-between items-center cursor-pointer`}
                    onClick={() => setAssigneeDropdownOpen(!assigneeDropdownOpen)}
                >
                    <span>
                    {selectedAssigneeDetails ? `${selectedAssigneeDetails.firstName || ''} ${selectedAssigneeDetails.lastName || ''} (${selectedAssigneeDetails.identifier})` : "Select member or Unassign"}
                    </span>
                    <ChevronDown size={16} className="text-gray-500" />
                </div>
                {selectedAssigneeClerkId && (
                    <button onClick={() => {setSelectedAssigneeClerkId(null); setAssigneeDropdownOpen(false);}} className="p-2 text-red-500 hover:text-red-700">
                        <X size={16}/>
                    </button>
                )}
             </div>

            {assigneeDropdownOpen && (
              <div className="absolute z-10 mt-1 w-full bg-white border border-gray-200 rounded-md shadow-lg max-h-60 overflow-auto">
                <input
                  type="text"
                  placeholder="Search members..."
                  value={memberSearchQuery}
                  onChange={(e) => setMemberSearchQuery(e.target.value)}
                  className="w-full px-3 py-2 border-b border-gray-200 text-sm outline-none"
                />
                 <div
                    className="flex items-center space-x-3 px-3 py-2 hover:bg-gray-100 cursor-pointer text-gray-500"
                    onClick={() => {
                        setSelectedAssigneeClerkId(null); // Explicitly set to null for unassigning
                        setAssigneeDropdownOpen(false);
                        setMemberSearchQuery("");
                    }}
                    >
                    <UserPlus size={16} className="text-gray-400"/> 
                    <span>Unassign</span>
                </div>
                {filteredMembers.map((member) => (
                  <div
                    key={member.id}
                    className="flex items-center space-x-3 px-3 py-2 hover:bg-gray-100 cursor-pointer"
                    onClick={() => {
                      setSelectedAssigneeClerkId(member.id);
                      setAssigneeDropdownOpen(false);
                      setMemberSearchQuery("");
                    }}
                  >
                    <Image src={member.imageUrl || userImgPlaceholder} alt={member.identifier} width={24} height={24} className="w-6 h-6 rounded-full object-cover" />
                    <span className="text-sm">{member.firstName || ''} {member.lastName || ''} ({member.identifier}) - {member.role}</span>
                  </div>
                ))}
                {filteredMembers.length === 0 && !memberSearchQuery && <p className="text-sm text-gray-500 p-3">No other members found.</p>}
                {filteredMembers.length === 0 && memberSearchQuery && <p className="text-sm text-gray-500 p-3">No members found matching search.</p>}
              </div>
            )}
          </div>
        </div>

        <div className="flex flex-col sm:flex-row justify-end space-y-2 sm:space-y-0 sm:space-x-3 mt-8">
          <button onClick={onClose} disabled={isLoading}
            className="px-6 py-2 text-sm border border-gray-300 rounded-md bg-white text-black hover:bg-gray-50 disabled:opacity-50 w-full sm:w-auto">
            Cancel
          </button>
          <button onClick={handleFormSubmit} disabled={isLoading || !organization}
            className="px-6 py-2 text-sm rounded-md bg-black text-white hover:bg-gray-800 disabled:opacity-50 disabled:bg-gray-400 w-full sm:w-auto">
            {isLoading ? "Saving Changes..." : "Save Changes"}
          </button>
        </div>
      </div>
    </div>
  );
};

export default EditAssetModal;

=== Folder: /c/Users/hp/desktop/clerk-webhooks/components/tracker ===
--- File: EmployeePageHeader.tsx ---
"use client";
import React, { useState } from "react";
import { PlusCircle, Upload } from "lucide-react";
import AddEmployeeModal from "./AddEmployeeModal"; // Updated import

interface EmployeePageHeaderProps {
  activeTab: string;
  setActiveTab: (tab: string) => void;
}

const EmployeePageHeader: React.FC<EmployeePageHeaderProps> = ({ activeTab, setActiveTab }) => {
  const tabs = ["All Employees", "Teams", "Roles"]; // Roles tab might lead to Roles page or show roles here
  const [showModal, setShowModal] = useState(false);

  return (
    <div className="w-full px-4 md:px-6 lg:px-10"> {/* Adjusted padding */}
      {showModal && <AddEmployeeModal onClose={() => setShowModal(false)} />}

      <div className="flex flex-col md:flex-row items-start md:items-center justify-between pt-6 pb-4 space-y-3 md:space-y-0">
        <div className="flex items-center space-x-3 md:space-x-4">
          <h2 className="text-xl md:text-2xl font-semibold text-black">Employees</h2>
          <div className="bg-gray-100 text-green-600 text-xs md:text-sm px-2 py-1 rounded-md font-medium">
            100 {/* This should be dynamic */}
          </div>
        </div>

        <div className="flex flex-col sm:flex-row items-stretch sm:items-center space-y-2 sm:space-y-0 sm:space-x-3 w-full md:w-auto">
          <button className="flex items-center justify-center px-4 py-2 border border-gray-300 text-black bg-white rounded-md text-sm font-medium hover:bg-gray-50 w-full sm:w-auto">
            <Upload size={16} className="mr-2" />
            Export
          </button>
          <button
            onClick={() => setShowModal(true)}
            className="flex items-center justify-center px-4 py-2 bg-[#34BC68] text-white rounded-md text-sm font-medium hover:bg-green-700 w-full sm:w-auto"
          >
            <PlusCircle size={16} className="mr-2" />
            New Employee
          </button>
        </div>
      </div>

      <div className="flex space-x-4 md:space-x-6 pt-2 border-b border-gray-200 overflow-x-auto">
        {tabs.map((tab) => (
          <button
            key={tab}
            onClick={() => setActiveTab(tab)}
            className={`text-sm font-medium pb-2.5 whitespace-nowrap ${
              activeTab === tab
                ? "text-[#34BC68] border-b-2 border-[#34BC68]"
                : "text-gray-600 hover:text-black"
            }`}
          >
            {tab}
          </button>
        ))}
      </div>
    </div>
  );
};

export default EmployeePageHeader;

=== Folder: /c/Users/hp/desktop/clerk-webhooks/components/tracker ===
--- File: EmployeeTable.tsx ---
"use client";
import React, { useState, useEffect, useRef } from "react";
import {
  Filter,
  List,
  LayoutGrid,
  Search,
  MoreVertical,
  ArrowLeft,
  ArrowRight,
} from "lucide-react";
import Image from "next/image";
import userImg from "../../public/next.svg"; // Updated import

interface User {
  name: string;
  email: string;
  id: string;
  role: string;
  type: "Full time" | "Part time" | "Contractor";
  status: "Active" | "Inactive" | "Invited";
  team: string;
  statusColor: "green" | "red" | "yellow";
  avatar: string;
}


const EmployeeTable: React.FC = () => {
  const [currentPage, setCurrentPage] = useState(1);
  const usersPerPage = 6; // Adjust as needed
  const [activeMenuIndex, setActiveMenuIndex] = useState<number | null>(null);
  const dropdownRef = useRef<HTMLDivElement>(null);
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedItems, setSelectedItems] = useState<string[]>([]);


  const users: User[] = [
    { name: "Ali Jouro", email: "ali.jouro@example.com", id: "#12FC4V56979", role: "Product Manager", type: "Full time", status: "Active", team: "Marketing", statusColor: "green", avatar: userImg },
    { name: "Sofia Lin", email: "sofia.lin@example.com", id: "#88FCV1234", role: "UX Designer", type: "Full time", status: "Active", team: "Design", statusColor: "green", avatar: userImg },
    { name: "Liam Ben", email: "liam.ben@example.com", id: "#19KD8210", role: "Backend Developer", type: "Part time", status: "Inactive", team: "Engineering", statusColor: "red", avatar: userImg },
    { name: "Emily Rose", email: "emily.rose@example.com", id: "#45AC2000", role: "HR Officer", type: "Full time", status: "Active", team: "HR", statusColor: "green", avatar: userImg },
    { name: "James Wu", email: "james.wu@example.com", id: "#93VU1029", role: "Frontend Developer", type: "Contractor", status: "Invited", team: "Engineering", statusColor: "yellow", avatar: userImg },
    { name: "Hana Yuki", email: "hana.yuki@example.com", id: "#54FR9210", role: "QA Engineer", type: "Full time", status: "Active", team: "Quality", statusColor: "green", avatar: userImg },
    { name: "Marcus Li", email: "marcus.li@example.com", id: "#29FE9183", role: "Accountant", type: "Full time", status: "Inactive", team: "Finance", statusColor: "red", avatar: userImg },
    { name: "Rachel Zed", email: "rachel.zed@example.com", id: "#61XY8201", role: "Data Scientist", type: "Part time", status: "Active", team: "Data", statusColor: "green", avatar: userImg },
  ];

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (
        dropdownRef.current &&
        !dropdownRef.current.contains(event.target as Node)
      ) {
        setActiveMenuIndex(null);
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, []);

  const handleSelectItem = (id: string) => {
    setSelectedItems(prev => 
      prev.includes(id) ? prev.filter(itemId => itemId !== id) : [...prev, id]
    );
  };

  const handleSelectAll = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.checked) {
      setSelectedItems(currentData.map(item => item.id));
    } else {
      setSelectedItems([]);
    }
  };
  
  const filteredUsers = users.filter((user) =>
    `${user.name} ${user.email} ${user.role} ${user.id} ${user.team}`
      .toLowerCase()
      .includes(searchQuery.toLowerCase())
  );
  
  const totalPages = Math.ceil(filteredUsers.length / usersPerPage);
  
  const currentData = filteredUsers.slice(
    (currentPage - 1) * usersPerPage,
    currentPage * usersPerPage
  );

  const handlePageChange = (page: number) => {
    if (page >= 1 && page <= totalPages) {
      setCurrentPage(page);
      setActiveMenuIndex(null); 
    }
  };
  
  const getStatusStyles = (statusColor: "green" | "red" | "yellow") => {
    switch (statusColor) {
      case "green": return "bg-green-100 text-green-700";
      case "red": return "bg-red-100 text-red-700";
      case "yellow": return "bg-yellow-100 text-yellow-700";
      default: return "bg-gray-100 text-gray-700";
    }
  };
   const getStatusDotStyles = (statusColor: "green" | "red" | "yellow") => {
    switch (statusColor) {
      case "green": return "bg-green-500";
      case "red": return "bg-red-500";
      case "yellow": return "bg-yellow-500";
      default: return "bg-gray-500";
    }
  };


  return (
    <div className="px-4 md:px-6 lg:px-10 pt-3">
      <div className="flex flex-col md:flex-row items-start md:items-center justify-between bg-white border border-gray-200 px-4 py-2.5 rounded-xl shadow-sm">
        <div className="flex items-center w-full md:w-auto md:max-w-md bg-transparent py-1">
          <Search className="text-gray-400 mr-2.5" size={18} />
          <input
            type="text"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            placeholder="Search employees by name, role, ID..."
            className="text-sm outline-none placeholder-gray-500 bg-transparent w-full"
          />
        </div>
        <div className="flex items-center space-x-2 mt-2 md:mt-0">
          <button className="flex items-center text-sm px-3 py-1.5 bg-white border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50">
            <Filter size={15} className="mr-1.5" />
            Filter
          </button>
          <button className="p-2 rounded-md bg-gray-100 hover:bg-gray-200">
            <List size={18} className="text-gray-700" />
          </button>
          <button className="p-2 rounded-md bg-white border border-gray-300 hover:bg-gray-50">
            <LayoutGrid size={18} className="text-gray-700" />
          </button>
        </div>
      </div>

      <div className="mt-4 bg-white border border-gray-200 rounded-xl overflow-x-auto shadow-sm">
        <table className="w-full text-left text-sm min-w-[800px]"> {/* Increased min-width */}
          <thead className="bg-gray-50 text-gray-600">
            <tr>
              <th className="px-4 py-3 w-12">
                 <input 
                  type="checkbox" 
                  className="form-checkbox h-4 w-4 text-green-600 border-gray-300 rounded focus:ring-green-500"
                  onChange={handleSelectAll}
                  checked={selectedItems.length === currentData.length && currentData.length > 0}
                />
              </th>
              <th className="px-4 py-3">Name</th>
              <th className="px-4 py-3">Employee ID</th>
              <th className="px-4 py-3">Role</th>
              <th className="px-4 py-3">Status</th>
              <th className="px-4 py-3">Teams</th>
              <th className="px-4 py-3 w-12"></th>
            </tr>
          </thead>
          <tbody className="text-gray-700">
            {currentData.map((user, index) => (
              <tr key={user.id} className="border-t border-gray-200 hover:bg-gray-50">
                <td className="px-4 py-3">
                   <input 
                    type="checkbox" 
                    className="form-checkbox h-4 w-4 text-green-600 border-gray-300 rounded focus:ring-green-500"
                    checked={selectedItems.includes(user.id)}
                    onChange={() => handleSelectItem(user.id)}
                  />
                </td>
                <td className="px-4 py-3">
                  <div className="flex items-center space-x-3">
                    <div className="relative w-9 h-9 sm:w-10 sm:h-10">
                      <Image
                        src={user.avatar}
                        alt={user.name}
                        width={40}
                        height={40}
                        className="w-full h-full rounded-full object-cover"
                      />
                      {user.status === "Active" && (
                        <div className="absolute bottom-0 right-0 w-2.5 h-2.5 sm:w-3 sm:h-3 bg-green-500 rounded-full border-2 border-white"></div>
                      )}
                    </div>
                    <div>
                      <div className="font-medium text-gray-800">{user.name}</div>
                      <div className="text-gray-500 text-xs">{user.email}</div>
                    </div>
                  </div>
                </td>
                <td className="px-4 py-3">
                  <span className="bg-gray-100 px-2.5 py-1 rounded-md text-xs font-medium text-gray-700">{user.id}</span>
                </td>
                <td className="px-4 py-3">
                  <div className="font-medium text-gray-800">{user.role}</div>
                  <div className="text-xs text-gray-500">{user.type}</div>
                </td>
                <td className="px-4 py-3">
                  <div className={`inline-flex items-center text-xs px-2.5 py-1 rounded-full font-medium ${getStatusStyles(user.statusColor)}`}>
                    <span className={`w-2 h-2 rounded-full mr-1.5 ${getStatusDotStyles(user.statusColor)}`} />
                    {user.status}
                  </div>
                </td>
                <td className="px-4 py-3 font-medium">
                  <span className="bg-gray-100 px-2.5 py-1 rounded-md text-xs font-medium text-gray-700">{user.team}</span>
                </td>
                <td className="px-4 py-3 text-right relative">
                  <button 
                    onClick={() => setActiveMenuIndex(index === activeMenuIndex ? null : index)}
                    className="text-gray-500 hover:text-gray-700 p-1 rounded-md hover:bg-gray-100"
                  >
                    <MoreVertical size={18} />
                  </button>
                  {activeMenuIndex === index && (
                    <div
                      ref={dropdownRef}
                      className="absolute right-0 mt-1 w-32 bg-white border border-gray-200 rounded-md shadow-lg text-xs z-10 py-1"
                    >
                      <a href="#" className="block px-3 py-1.5 hover:bg-gray-100 text-gray-700">View Details</a>
                      <a href="#" className="block px-3 py-1.5 hover:bg-gray-100 text-gray-700">Edit Employee</a>
                      <a href="#" className="block px-3 py-1.5 hover:bg-gray-100 text-red-600">Deactivate</a>
                    </div>
                  )}
                </td>
              </tr>
            ))}
            {currentData.length === 0 && (
              <tr>
                <td colSpan={7} className="text-center py-10 text-gray-500">
                  No employees found.
                </td>
              </tr>
            )}
          </tbody>
        </table>

        {totalPages > 1 && (
        <div className="flex items-center justify-between px-4 py-3 border-t border-gray-200 text-xs text-gray-600">
          <button
            onClick={() => handlePageChange(currentPage - 1)}
            className="flex items-center px-2.5 py-1.5 border border-gray-300 bg-white rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
            disabled={currentPage === 1}
          >
            <ArrowLeft size={14} className="mr-1" />
            Previous
          </button>
           <div className="flex items-center space-x-1">
            {Array.from({ length: totalPages }, (_, i) => i + 1).map(pageNumber => (
                <button
                key={pageNumber}
                onClick={() => handlePageChange(pageNumber)}
                className={`px-2.5 py-1 rounded-md font-medium ${
                    currentPage === pageNumber ? "bg-green-100 text-green-700" : "text-gray-600 hover:bg-gray-100"
                }`}
                >
                {pageNumber}
                </button>
            ))}
          </div>
          <button
            onClick={() => handlePageChange(currentPage + 1)}
            className="flex items-center px-2.5 py-1.5 border border-gray-300 bg-white rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
            disabled={currentPage === totalPages}
          >
            Next
            <ArrowRight size={14} className="ml-1" />
          </button>
        </div>
        )}
      </div>
    </div>
  );
};

export default EmployeeTable;

=== Folder: /c/Users/hp/desktop/clerk-webhooks/components/tracker ===
--- File: Sidebar.tsx ---
"use client";

import React, { useEffect, useRef } from "react";
import Link from "next/link";
import {
  LayoutDashboard,
  CreditCard,
  DollarSign,
  Briefcase,
  ShieldCheck,
  Users,
  BarChart2,
  Settings,
  LogOut,
  X // For mobile close button
} from "lucide-react";
import { SignedOut, SignOutButton } from "@clerk/nextjs"; // For logout

interface NavItem {
  label: string;
  icon: JSX.Element;
  href: string;
}

const navItems: NavItem[] = [
  { label: "Dashboard", icon: <LayoutDashboard size={20} />, href: "/dashboard" },
  // { label: "Expense", icon: <CreditCard size={20} />, href: "/expense" },
  // { label: "Income", icon: <DollarSign size={20} />, href: "/income" },
  { label: "Assets", icon: <Briefcase size={20} />, href: "/assets" },
  // { label: "Roles", icon: <ShieldCheck size={20} />, href: "/roles" },
  { label: "Employees", icon: <Users size={20} />, href: "/employees" },
  { label: "Reports", icon: <BarChart2 size={20} />, href: "/reports" },
  { label: "Settings", icon: <Settings size={20} />, href: "/settings" },
];

interface SidebarProps {
  active: string;
  onItemClick: (label: string) => void; // Kept for potential direct state changes if needed, but Link handles nav
  isMobileSidebarOpen: boolean;
  setIsMobileSidebarOpen: (isOpen: boolean) => void;
}

const Sidebar: React.FC<SidebarProps> = ({
  active,
  onItemClick,
  isMobileSidebarOpen,
  setIsMobileSidebarOpen,
}) => {
  const sidebarRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const handleOutsideClick = (event: MouseEvent) => {
      if (
        isMobileSidebarOpen &&
        sidebarRef.current &&
        !sidebarRef.current.contains(event.target as Node)
      ) {
        // Only close if click is outside, Topbar's menu button handles opening
        // This effect is mainly for the overlay click on mobile
      }
    };
    document.addEventListener("mousedown", handleOutsideClick);
    return () => {
      document.removeEventListener("mousedown", handleOutsideClick);
    };
  }, [isMobileSidebarOpen, setIsMobileSidebarOpen]);

  return (
    <div ref={sidebarRef} className="h-full bg-white flex flex-col justify-between border-r border-gray-200 md:border-none">
      {/* Top Title & Mobile Close Button */}
      <div className="pt-8 md:pt-10 pb-8 md:pb-12 pl-6 md:pl-12 pr-4 flex justify-between items-center">
        <Link href="/dashboard" passHref>
          <h1 className="text-xl font-bold cursor-pointer">
            <span className="text-[#34bc68]">Expense</span>
            <span className="text-black">Scout</span>
          </h1>
        </Link>
        <button
          className="md:hidden text-gray-600 hover:text-black"
          onClick={() => setIsMobileSidebarOpen(false)}
        >
          <X size={24} />
        </button>
      </div>

      {/* Navigation Items */}
      <ul className="flex-1 space-y-1 pl-4 md:pl-8 pr-2">
        {navItems.map((item) => (
          <li key={item.label}>
            <Link
              href={item.href}
              passHref
              className={`flex items-center px-3 py-2.5 cursor-pointer relative group rounded-lg md:rounded-tr-2xl md:rounded-br-2xl md:rounded-l-none
                ${
                  active === item.label
                    ? "bg-[#34bc68] text-white" // Active style consistent
                    : "text-gray-700 hover:bg-gray-100 hover:text-gray-900"
                }`}
              onClick={() => {
                onItemClick(item.label); // For potential state updates
                if (isMobileSidebarOpen) setIsMobileSidebarOpen(false); // Close mobile sidebar on nav
              }}
            >
              <span className="mr-3">{item.icon}</span>
              <span className="text-sm font-medium">{item.label}</span>
            </Link>
          </li>
        ))}
      </ul>

      {/* Logout */}
      <div className="py-6 pl-6 md:pl-10">
        <SignOutButton>
          <button className="flex items-center text-gray-700 hover:text-gray-900 cursor-pointer w-full px-3 py-2.5 rounded-lg hover:bg-gray-100">
            <LogOut size={20} className="mr-3" />
            <span className="text-sm font-medium">Logout</span>
          </button>
        </SignOutButton>
      </div>
    </div>
  );
};

export default Sidebar;

=== Folder: /c/Users/hp/desktop/clerk-webhooks/components/tracker ===
--- File: Topbar.tsx ---
"use client";
import React from "react";
import { Settings, Search, Menu } from "lucide-react";
import { UserButton, useUser, OrganizationSwitcher } from "@clerk/nextjs";
import NotificationBell from '@/components/notifications/NotificationBell';

interface TopbarProps {
  setIsMobileSidebarOpen: (isOpen: boolean) => void;
}

const Topbar: React.FC<TopbarProps> = ({ setIsMobileSidebarOpen }) => {
  const { user } = useUser();

  return (
    <div className="w-full bg-white sticky top-0 z-30"> {/* z-30 to be above content but below modals */}
      <div className="flex items-center justify-between px-4 md:px-6 py-3 md:py-4">
        {/* Mobile Hamburger */}
        <div className="md:hidden">
          <Menu
            size={24}
            className="text-black cursor-pointer"
            onClick={() => setIsMobileSidebarOpen(true)}
          />
        </div>

        {/* Search input (hidden on mobile) */}
        <div className="hidden md:flex items-center bg-gray-50 px-3 py-2 rounded-md w-full max-w-md lg:max-w-lg">
          <Search className="text-gray-400 mr-2" size={18} />
          <input
            type="text"
            placeholder="Search anything here..."
            className="bg-transparent outline-none text-sm w-full text-gray-700 placeholder-gray-500"
          />
        </div>

        {/* Spacer to push icons to right if search is not taking full width or on mobile */}
        <div className="flex-1 md:hidden"></div>

        {/* Icons section */}
        <div className="flex items-center space-x-4 md:space-x-6">
          {/* <button className="text-gray-500 hover:text-gray-700">
            <Settings size={20} />
          </button> */}
          <NotificationBell />

          {/* Clerk Organization Switcher */}
          <OrganizationSwitcher 
            afterCreateOrganizationUrl="/dashboard" 
            afterLeaveOrganizationUrl="/sign-in"
            afterSelectOrganizationUrl={(org) => `/dashboard?orgId=${org.id}`}
            appearance={{
              elements: {
                organizationPreviewTextContainer: "text-sm",
                organizationSwitcherTrigger: "text-sm p-2 border border-gray-300 rounded-md hover:bg-gray-50",
              }
            }}
          />

          {/* Clerk User Button */}
          <UserButton afterSignOutUrl="/sign-in" />
        </div>
      </div>
      {/* Bottom border line */}
      <div className="h-[1px] bg-gray-200 w-full"></div>
    </div>
  );
};

export default Topbar;

=== Folder: /c/Users/hp/desktop/clerk-webhooks/components/ui ===
--- File: button.tsx ---
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }


=== Folder: /c/Users/hp/desktop/clerk-webhooks/components/ui ===
--- File: dropdown-menu.tsx ---
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import {
  CheckIcon,
  ChevronRightIcon,
  DotFilledIcon,
} from "@radix-ui/react-icons"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRightIcon className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md",
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <CheckIcon className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <DotFilledIcon className="h-4 w-4 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}


=== Folder: /c/Users/hp/desktop/clerk-webhooks ===
--- File: components.json ---
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "gray",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils"
  }
}

=== Folder: /c/Users/hp/desktop/clerk-webhooks/hooks ===
--- File: use-mounted.tsx ---
'use client'

import { useEffect, useState } from 'react'

export default function useMounted() {
  const [mounted, setMounted] = useState(false)

  useEffect(() => {
    setMounted(true)
  }, [])

  return mounted
}


=== Folder: /c/Users/hp/desktop/clerk-webhooks/lib ===
--- File: cloudinary.ts ---
import { v2 as cloudinary } from 'cloudinary';

if (!process.env.CLOUDINARY_CLOUD_NAME || !process.env.CLOUDINARY_API_KEY || !process.env.CLOUDINARY_API_SECRET) {
  console.warn("CLOUDINARY environment variables are not fully set. Image uploads will fail.");
}

cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET,
  secure: true,
});

export const uploadToCloudinary = (fileUri: string, folder: string, public_id?: string): Promise<any> => {
  return new Promise((resolve, reject) => {
    cloudinary.uploader.upload(fileUri, {
      folder: folder,
      public_id: public_id, // Useful for overwriting images
      overwrite: true,
      invalidate: true,
    })
    .then((result) => {
      resolve(result);
    })
    .catch((error) => {
      console.error("Cloudinary Upload Error:", error);
      reject(error);
    });
  });
};

export const deleteFromCloudinary = (publicId: string): Promise<any> => {
  return new Promise((resolve, reject) => {
    cloudinary.uploader.destroy(publicId)
      .then((result) => {
        resolve(result);
      })
      .catch((error) => {
        console.error("Cloudinary Deletion Error:", error);
        reject(error);
      });
  });
};

// Function to extract public ID from Cloudinary URL
export const getPublicIdFromUrl = (url: string): string | null => {
  if (!url || !url.includes('cloudinary.com')) return null;
  // Example URL: http://res.cloudinary.com/cloud_name/image/upload/v12345/folder/public_id.jpg
  // Need to extract "folder/public_id"
  try {
    const parsedUrl = new URL(url);
    const pathSegments = parsedUrl.pathname.split('/');
    // Path segments look like: ['', 'cloud_name', 'image', 'upload', 'v12345', 'folder', 'public_id.jpg']
    // We need to find the 'upload' segment and take everything after the version number.
    const uploadIndex = pathSegments.findIndex(segment => segment === 'upload');

    if (uploadIndex === -1 || uploadIndex + 2 >= pathSegments.length) {
      // If 'upload' is not found, or there's no version and public_id after it.
      // This might also happen if the URL structure is different (e.g. fetched, private images)
      // Fallback for URLs that might not have a version, or are structured differently
      // e.g. https://res.cloudinary.com/cloud_name/image/upload/folder/public_id.jpg
      // or https://res.cloudinary.com/cloud_name/image/private_images/folder/public_id.jpg
      const imageTypeIndex = pathSegments.findIndex(segment => segment === 'image' || segment === 'video' || segment === 'raw');
      if (imageTypeIndex !== -1 && imageTypeIndex + 2 < pathSegments.length) {
        let publicId = pathSegments.slice(imageTypeIndex + 2).join('/');
        // Remove extension
        publicId = publicId.substring(0, publicId.lastIndexOf('.'));
        if (publicId) return publicId;
      }
      console.warn(`Could not reliably extract public_id from URL: ${url}. Attempting simpler extraction.`);
      // Simplest extraction attempt if standard parsing fails
      const lastSlash = url.lastIndexOf('/') + 1;
      const lastDot = url.lastIndexOf('.');
      if (lastSlash > 0 && lastDot > lastSlash) {
        return url.substring(lastSlash, lastDot);
      }
      return null;
    }

    // Standard case: /image/upload/vXXXXX/folder/public_id.ext
    // We want 'folder/public_id'
    let publicId = pathSegments.slice(uploadIndex + 2).join('/'); // Skips the version segment
    // Remove extension like .jpg, .png etc.
    publicId = publicId.substring(0, publicId.lastIndexOf('.'));

    return publicId;
  } catch (error) {
    console.error(`Error parsing Cloudinary URL ${url}:`, error);
    return null;
  }
};

export default cloudinary;


=== Folder: /c/Users/hp/desktop/clerk-webhooks/lib/hooks ===
--- File: useNotifications.ts ---
// lib/hooks/useNotifications.ts
import useSWR from 'swr';
import { useAuth } from '@clerk/nextjs';

export interface Notification {
  id: string;
  message: string;
  read: boolean;
  createdAt: string;
  updatedAt: string;
  recipientClerkUserId: string;
  assetId?: string;
  asset?: {
    id: string;
    title: string;
  };
  type?: string;
}

const fetcher = async (url: string, getToken: () => Promise<string | null>) => {
  const token = await getToken();

  const res = await fetch(url, {
    headers: {
      'Content-Type': 'application/json',
      ...(token && { 'Authorization': `Bearer ${token}` }),
    },
  });

  if (!res.ok) {
    const errorInfo = await res.json().catch(() => ({ message: res.statusText }));
    const error = new Error(errorInfo.message || 'An error occurred while fetching the data.');
    // @ts-ignore
    error.status = res.status;
    throw error;
  }
  return res.json();
};

export function useNotifications() {
  const { getToken } = useAuth();

  const { data, error, mutate, isLoading } = useSWR<Notification[]>(
    '/api/notifications', 
    (url) => fetcher(url, getToken)
  );

  const markAsRead = async (notificationIds: string[], readStatus: boolean = true) => {
    try {
      const token = await getToken();
      const res = await fetch('/api/notifications', {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          ...(token && { 'Authorization': `Bearer ${token}` }),
        },
        body: JSON.stringify({ notificationIds, readStatus }),
      });
      if (!res.ok) {
        const errorData = await res.json().catch(() => ({ message: 'Failed to update notifications and parse error response' }));
        throw new Error(errorData.message || 'Failed to update notifications');
      }
      mutate(); 
      return await res.json();
    } catch (err) {
      console.error("Error marking notifications as read:", err);
      throw err;
    }
  };

  return {
    notifications: data,
    isLoading: isLoading, 
    isError: error,
    markAsRead,
    mutate, 
  };
}


=== Folder: /c/Users/hp/desktop/clerk-webhooks/lib ===
--- File: prisma.ts ---
import { PrismaClient } from '@prisma/client'

declare global {
  var prisma: PrismaClient | undefined
}

const prisma = global.prisma || new PrismaClient()

if (process.env.NODE_ENV === 'development') global.prisma = prisma

export default prisma


=== Folder: /c/Users/hp/desktop/clerk-webhooks/lib ===
--- File: users.ts ---
// lib/users.ts
import prisma from '@/lib/prisma';
import { Prisma } from '@prisma/client'; // Import Prisma

// Define a type for the data expected by createUser, matching the relevant fields of your Prisma User model
type CreateUserArgs = Omit<Prisma.UserCreateInput, 'id' | 'createdAt' | 'updatedAt' | 'assetsAssigned'>;

export async function createUser(data: CreateUserArgs) {
  try {
    const user = await prisma.user.create({ data });
    return { user };
  } catch (error) {
    // It's good to log the actual error for debugging
    console.error("Error creating user in DB:", error);
    // Provide a more specific error message or object if needed
    return { error: error instanceof Error ? error.message : "Unknown error creating user" };
  }
}

export async function getUserById({
  id,
  clerkUserId
}: {
  id?: string;
  clerkUserId?: string;
}) {
  try {
    if (!id && !clerkUserId) {
      throw new Error('id or clerkUserId is required');
    }

    const query = id ? { id } : { clerkUserId };

    const user = await prisma.user.findUnique({ where: query });
    return { user };
  } catch (error) {
    return { error };
  }
}

// UpdateUser remains the same for now
export async function UpdateUser(id: string, data: Partial<Prisma.UserUpdateInput>) { // Use Prisma.UserUpdateInput
  try {
    const user = await prisma.user.update({
      where: { id },
      data
    });
    return { user };
  } catch (error) {
    return { error };
  }
}

=== Folder: /c/Users/hp/desktop/clerk-webhooks/lib ===
--- File: utils.ts ---
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}


=== Folder: /c/Users/hp/desktop/clerk-webhooks ===
--- File: middleware.ts ---
// /c/Users/hp/desktop/clerk-webhooks/middleware.ts
import { clerkMiddleware, createRouteMatcher } from '@clerk/nextjs/server';

// Define public routes (accessible without authentication)
const isPublicRoute = createRouteMatcher([
  '/', // Landing page
  '/sign-in(.*)',
  '/sign-up(.*)',
  '/api/webhooks/clerk(.*)', // Clerk webhooks
]);

export default clerkMiddleware((auth, req) => {
  if (isPublicRoute(req)) {
    // Allow access to public routes
    return;
  }
  // For all other routes, protect them.
  auth.protect();
});

export const config = {
  matcher: [
    '/((?!.*\\..*|_next).*)', // Matches all routes except static files and _next internal routes
    '/',                      // Ensure the root route is matched
    '/(api|trpc)(.*)',        // Matches all API routes
  ],
};

=== Folder: /c/Users/hp/desktop/clerk-webhooks ===
--- File: next-env.d.ts ---
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.


=== Folder: /c/Users/hp/desktop/clerk-webhooks ===
--- File: package.json ---
{
  "name": "next-shadcn",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@clerk/clerk-sdk-node": "^4.13.23",
    "@clerk/nextjs": "^6.20.2",
    "@google/generative-ai": "^0.24.1",
    "@prisma/client": "^6.8.2",
    "@radix-ui/react-dropdown-menu": "^2.0.6",
    "@radix-ui/react-icons": "^1.3.0",
    "@radix-ui/react-slot": "^1.0.2",
    "class-variance-authority": "^0.7.0",
    "cloudinary": "^2.6.1",
    "clsx": "^2.1.1",
    "date-fns": "^4.1.0",
    "docx": "^9.5.0",
    "exceljs": "^4.4.0",
    "lucide-react": "^0.511.0",
    "next": "15.3.3",
    "next-cloudinary": "^6.16.0",
    "next-themes": "^0.4.6",
    "pdf-lib": "^1.17.1",
    "prisma": "^6.8.2",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "recharts": "^2.15.3",
    "sonner": "^2.0.5",
    "svix": "^1.66.0",
    "tailwind-merge": "^2.3.0",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@types/node": "^20.12.12",
    "@types/react": "^19.1.0",
    "@types/react-dom": "^19.1.0",
    "autoprefixer": "^10.4.19",
    "eslint": "^9.28.0",
    "eslint-config-next": "15.3.3",
    "postcss": "^8.4.38",
    "prettier": "^3.2.5",
    "prettier-plugin-tailwindcss": "^0.5.14",
    "tailwindcss": "^3.4.3",
    "typescript": "^5.4.5"
  }
}


=== Folder: /c/Users/hp/desktop/clerk-webhooks ===
--- File: postcss.config.js ---
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};


=== Folder: /c/Users/hp/desktop/clerk-webhooks ===
--- File: tailwind.config.ts ---
import type { Config } from "tailwindcss"

const config = {
  darkMode: ["class"],
  content: [
    './pages/**/*.{ts,tsx}',
    './components/**/*.{ts,tsx}',
    './app/**/*.{ts,tsx}',
    './src/**/*.{ts,tsx}',
	],
  prefix: "",
  theme: {
    darkMode: 'class',
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config

export default config

=== Folder: /c/Users/hp/desktop/clerk-webhooks ===
--- File: tsconfig.json ---
{
  "compilerOptions": {
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": [
        "./*"
      ]
    },
    "target": "ES2017"
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts"
  ],
  "exclude": [
    "node_modules"
  ]
}


